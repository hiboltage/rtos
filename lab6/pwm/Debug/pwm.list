
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800272c  0800272c  0000372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800276c  0800276c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800276c  0800276c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800276c  0800276c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800276c  0800276c  0000376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002770  08002770  00003770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002774  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002780  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002780  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b08  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d7  00000000  00000000  0000db44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0000f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b2  00000000  00000000  0000ff78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255fa  00000000  00000000  0001082a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c82a  00000000  00000000  00035e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e90b4  00000000  00000000  0004264e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  0012b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0012e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002714 	.word	0x08002714

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002714 	.word	0x08002714

080001c8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b34      	ldr	r3, [pc, #208]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001e2:	4a33      	ldr	r2, [pc, #204]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80001ea:	4b31      	ldr	r3, [pc, #196]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ee:	f003 0304 	and.w	r3, r3, #4
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001f6:	4b2e      	ldr	r3, [pc, #184]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001fa:	4a2d      	ldr	r2, [pc, #180]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 80001fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000202:	4b2b      	ldr	r3, [pc, #172]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b28      	ldr	r3, [pc, #160]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000212:	4a27      	ldr	r2, [pc, #156]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800021a:	4b25      	ldr	r3, [pc, #148]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b22      	ldr	r3, [pc, #136]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022a:	4a21      	ldr	r2, [pc, #132]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 800022c:	f043 0302 	orr.w	r3, r3, #2
 8000230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000232:	4b1f      	ldr	r3, [pc, #124]	@ (80002b0 <MX_GPIO_Init+0xe8>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000236:	f003 0302 	and.w	r3, r3, #2
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2120      	movs	r1, #32
 8000242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000246:	f000 fcf1 	bl	8000c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800024a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800024e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000250:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	4619      	mov	r1, r3
 8000260:	4814      	ldr	r0, [pc, #80]	@ (80002b4 <MX_GPIO_Init+0xec>)
 8000262:	f000 fb39 	bl	80008d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000266:	230c      	movs	r3, #12
 8000268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800026a:	2302      	movs	r3, #2
 800026c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000272:	2303      	movs	r3, #3
 8000274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000276:	2307      	movs	r3, #7
 8000278:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	4619      	mov	r1, r3
 8000280:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000284:	f000 fb28 	bl	80008d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000288:	2320      	movs	r3, #32
 800028a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2301      	movs	r3, #1
 800028e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000298:	f107 0314 	add.w	r3, r7, #20
 800029c:	4619      	mov	r1, r3
 800029e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a2:	f000 fb19 	bl	80008d8 <HAL_GPIO_Init>

}
 80002a6:	bf00      	nop
 80002a8:	3728      	adds	r7, #40	@ 0x28
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	48000800 	.word	0x48000800

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002bc:	f000 f9aa 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c0:	f000 f814 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c4:	f7ff ff80 	bl	80001c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002c8:	f000 f8ce 	bl	8000468 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);				// start TIM2
 80002cc:	4806      	ldr	r0, [pc, #24]	@ (80002e8 <main+0x30>)
 80002ce:	f001 faf1 	bl	80018b4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// start PWM generation on TIM2
 80002d2:	2100      	movs	r1, #0
 80002d4:	4804      	ldr	r0, [pc, #16]	@ (80002e8 <main+0x30>)
 80002d6:	f001 fbad 	bl	8001a34 <HAL_TIM_PWM_Start>

  TIM2->CCR1 = 3999;	// setup TIM2 CCR1 to generate 2 second pulse with 10 second period
 80002da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002de:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80002e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <main+0x2c>
 80002e8:	20000028 	.word	0x20000028

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b096      	sub	sp, #88	@ 0x58
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2244      	movs	r2, #68	@ 0x44
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 f9de 	bl	80026bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800030e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000312:	f000 fcb1 	bl	8000c78 <HAL_PWREx_ControlVoltageScaling>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800031c:	f000 f837 	bl	800038e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000320:	2302      	movs	r3, #2
 8000322:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000328:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032a:	2310      	movs	r3, #16
 800032c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032e:	2302      	movs	r3, #2
 8000330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000336:	2301      	movs	r3, #1
 8000338:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800033a:	230a      	movs	r3, #10
 800033c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800033e:	2307      	movs	r3, #7
 8000340:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000342:	2302      	movs	r3, #2
 8000344:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0314 	add.w	r3, r7, #20
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fce8 	bl	8000d24 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800035a:	f000 f818 	bl	800038e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2303      	movs	r3, #3
 8000364:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000372:	463b      	mov	r3, r7
 8000374:	2104      	movs	r1, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f001 f8b0 	bl	80014dc <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000382:	f000 f804 	bl	800038e <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3758      	adds	r7, #88	@ 0x58
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000392:	b672      	cpsid	i
}
 8000394:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000396:	bf00      	nop
 8000398:	e7fd      	b.n	8000396 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <HAL_MspInit+0x44>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003a6:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <HAL_MspInit+0x44>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <HAL_MspInit+0x44>)
 80003b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <HAL_MspInit+0x44>)
 80003bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003be:	4a08      	ldr	r2, [pc, #32]	@ (80003e0 <HAL_MspInit+0x44>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <HAL_MspInit+0x44>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <NMI_Handler+0x4>

080003ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043a:	f000 f947 	bl	80006cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <SystemInit+0x20>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800044e:	4a05      	ldr	r2, [pc, #20]	@ (8000464 <SystemInit+0x20>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	@ 0x28
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800046e:	f107 031c 	add.w	r3, r7, #28
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800047a:	463b      	mov	r3, r7
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
 8000488:	615a      	str	r2, [r3, #20]
 800048a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800048c:	4b22      	ldr	r3, [pc, #136]	@ (8000518 <MX_TIM2_Init+0xb0>)
 800048e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000492:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40000 - 1;
 8000494:	4b20      	ldr	r3, [pc, #128]	@ (8000518 <MX_TIM2_Init+0xb0>)
 8000496:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800049a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	4b1e      	ldr	r3, [pc, #120]	@ (8000518 <MX_TIM2_Init+0xb0>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80004a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <MX_TIM2_Init+0xb0>)
 80004a4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80004a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <MX_TIM2_Init+0xb0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b0:	4b19      	ldr	r3, [pc, #100]	@ (8000518 <MX_TIM2_Init+0xb0>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004b6:	4818      	ldr	r0, [pc, #96]	@ (8000518 <MX_TIM2_Init+0xb0>)
 80004b8:	f001 fa64 	bl	8001984 <HAL_TIM_PWM_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80004c2:	f7ff ff64 	bl	800038e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	4619      	mov	r1, r3
 80004d4:	4810      	ldr	r0, [pc, #64]	@ (8000518 <MX_TIM2_Init+0xb0>)
 80004d6:	f002 f869 	bl	80025ac <HAL_TIMEx_MasterConfigSynchronization>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80004e0:	f7ff ff55 	bl	800038e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e4:	2360      	movs	r3, #96	@ 0x60
 80004e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f4:	463b      	mov	r3, r7
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	4807      	ldr	r0, [pc, #28]	@ (8000518 <MX_TIM2_Init+0xb0>)
 80004fc:	f001 fba0 	bl	8001c40 <HAL_TIM_PWM_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000506:	f7ff ff42 	bl	800038e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800050a:	4803      	ldr	r0, [pc, #12]	@ (8000518 <MX_TIM2_Init+0xb0>)
 800050c:	f000 f824 	bl	8000558 <HAL_TIM_MspPostInit>

}
 8000510:	bf00      	nop
 8000512:	3728      	adds	r7, #40	@ 0x28
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000028 	.word	0x20000028

0800051c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800052c:	d10b      	bne.n	8000546 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <HAL_TIM_PWM_MspInit+0x38>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000532:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <HAL_TIM_PWM_MspInit+0x38>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6593      	str	r3, [r2, #88]	@ 0x58
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_TIM_PWM_MspInit+0x38>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000578:	d11c      	bne.n	80005b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <HAL_TIM_MspPostInit+0x64>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <HAL_TIM_MspPostInit+0x64>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <HAL_TIM_MspPostInit+0x64>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000592:	2301      	movs	r3, #1
 8000594:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f000 f992 	bl	80008d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000

080005c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c4:	f7ff ff3e 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	@ (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ee:	f002 f86d 	bl	80026cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f2:	f7ff fe61 	bl	80002b8 <main>

080005f6 <LoopForever>:

LoopForever:
    b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000604:	08002774 	.word	0x08002774
  ldr r2, =_sbss
 8000608:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800060c:	20000078 	.word	0x20000078

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_Init+0x3c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a0b      	ldr	r2, [pc, #44]	@ (8000650 <HAL_Init+0x3c>)
 8000624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000628:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062a:	2003      	movs	r0, #3
 800062c:	f000 f920 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000630:	2000      	movs	r0, #0
 8000632:	f000 f80f 	bl	8000654 <HAL_InitTick>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	e001      	b.n	8000646 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000642:	f7ff feab 	bl	800039c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000646:	79fb      	ldrb	r3, [r7, #7]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <HAL_InitTick+0x6c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d023      	beq.n	80006b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000668:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <HAL_InitTick+0x70>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <HAL_InitTick+0x6c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f91d 	bl	80008be <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10f      	bne.n	80006aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d809      	bhi.n	80006a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f000 f8f5 	bl	8000886 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800069c:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <HAL_InitTick+0x74>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	e007      	b.n	80006b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e004      	b.n	80006b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	73fb      	strb	r3, [r7, #15]
 80006ae:	e001      	b.n	80006b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000004 	.word	0x20000004

080006cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_IncTick+0x20>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <HAL_IncTick+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	4a04      	ldr	r2, [pc, #16]	@ (80006f0 <HAL_IncTick+0x24>)
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000074 	.word	0x20000074

080006f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b03      	ldr	r3, [pc, #12]	@ (8000708 <HAL_GetTick+0x14>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000074 	.word	0x20000074

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	@ (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	@ (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	@ 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f1c3 0307 	rsb	r3, r3, #7
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf28      	it	cs
 80007e2:	2304      	movcs	r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d902      	bls.n	80007f4 <NVIC_EncodePriority+0x30>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3b03      	subs	r3, #3
 80007f2:	e000      	b.n	80007f6 <NVIC_EncodePriority+0x32>
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43da      	mvns	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43d9      	mvns	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	4313      	orrs	r3, r2
         );
}
 800081e:	4618      	mov	r0, r3
 8000820:	3724      	adds	r7, #36	@ 0x24
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800083c:	d301      	bcc.n	8000842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083e:	2301      	movs	r3, #1
 8000840:	e00f      	b.n	8000862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a0a      	ldr	r2, [pc, #40]	@ (800086c <SysTick_Config+0x40>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084a:	210f      	movs	r1, #15
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f7ff ff8e 	bl	8000770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <SysTick_Config+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <SysTick_Config+0x40>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff47 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff5c 	bl	8000754 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ff8e 	bl	80007c4 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5d 	bl	8000770 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ffb0 	bl	800082c <SysTick_Config>
 80008cc:	4603      	mov	r3, r0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e6:	e17f      	b.n	8000be8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	2101      	movs	r1, #1
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f000 8171 	beq.w	8000be2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	2b01      	cmp	r3, #1
 800090a:	d005      	beq.n	8000918 <HAL_GPIO_Init+0x40>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 0303 	and.w	r3, r3, #3
 8000914:	2b02      	cmp	r3, #2
 8000916:	d130      	bne.n	800097a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800094e:	2201      	movs	r2, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	f003 0201 	and.w	r2, r3, #1
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f003 0303 	and.w	r3, r3, #3
 8000982:	2b03      	cmp	r3, #3
 8000984:	d118      	bne.n	80009b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800098c:	2201      	movs	r2, #1
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	f003 0201 	and.w	r2, r3, #1
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 0303 	and.w	r3, r3, #3
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d017      	beq.n	80009f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2203      	movs	r2, #3
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d123      	bne.n	8000a48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	08da      	lsrs	r2, r3, #3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3208      	adds	r2, #8
 8000a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f003 0307 	and.w	r3, r3, #7
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	220f      	movs	r2, #15
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	691a      	ldr	r2, [r3, #16]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	08da      	lsrs	r2, r3, #3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3208      	adds	r2, #8
 8000a42:	6939      	ldr	r1, [r7, #16]
 8000a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0203 	and.w	r2, r3, #3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	f000 80ac 	beq.w	8000be2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8000c08 <HAL_GPIO_Init+0x330>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8e:	4a5e      	ldr	r2, [pc, #376]	@ (8000c08 <HAL_GPIO_Init+0x330>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a96:	4b5c      	ldr	r3, [pc, #368]	@ (8000c08 <HAL_GPIO_Init+0x330>)
 8000a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8000c0c <HAL_GPIO_Init+0x334>)
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000acc:	d025      	beq.n	8000b1a <HAL_GPIO_Init+0x242>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8000c10 <HAL_GPIO_Init+0x338>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d01f      	beq.n	8000b16 <HAL_GPIO_Init+0x23e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8000c14 <HAL_GPIO_Init+0x33c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0x23a>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8000c18 <HAL_GPIO_Init+0x340>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x236>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8000c1c <HAL_GPIO_Init+0x344>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x232>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a4b      	ldr	r2, [pc, #300]	@ (8000c20 <HAL_GPIO_Init+0x348>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x22e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a4a      	ldr	r2, [pc, #296]	@ (8000c24 <HAL_GPIO_Init+0x34c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x22a>
 8000afe:	2306      	movs	r3, #6
 8000b00:	e00c      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b02:	2307      	movs	r3, #7
 8000b04:	e00a      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b06:	2305      	movs	r3, #5
 8000b08:	e008      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e004      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x244>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	f002 0203 	and.w	r2, r2, #3
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	4093      	lsls	r3, r2
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b2c:	4937      	ldr	r1, [pc, #220]	@ (8000c0c <HAL_GPIO_Init+0x334>)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b5e:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b64:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4013      	ands	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b88:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bdc:	4a12      	ldr	r2, [pc, #72]	@ (8000c28 <HAL_GPIO_Init+0x350>)
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f47f ae78 	bne.w	80008e8 <HAL_GPIO_Init+0x10>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	371c      	adds	r7, #28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	48000400 	.word	0x48000400
 8000c14:	48000800 	.word	0x48000800
 8000c18:	48000c00 	.word	0x48000c00
 8000c1c:	48001000 	.word	0x48001000
 8000c20:	48001400 	.word	0x48001400
 8000c24:	48001800 	.word	0x48001800
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40007000 	.word	0x40007000

08000c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c86:	d130      	bne.n	8000cea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c88:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c94:	d038      	beq.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2232      	movs	r2, #50	@ 0x32
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	0c9b      	lsrs	r3, r3, #18
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cbc:	e002      	b.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cd0:	d102      	bne.n	8000cd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f2      	bne.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ce4:	d110      	bne.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e00f      	b.n	8000d0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cf6:	d007      	beq.n	8000d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cf8:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d00:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40007000 	.word	0x40007000
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	431bde83 	.word	0x431bde83

08000d24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e3ca      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d36:	4b97      	ldr	r3, [pc, #604]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d40:	4b94      	ldr	r3, [pc, #592]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80e4 	beq.w	8000f20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <HAL_RCC_OscConfig+0x4a>
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	2b0c      	cmp	r3, #12
 8000d62:	f040 808b 	bne.w	8000e7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	f040 8087 	bne.w	8000e7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d6e:	4b89      	ldr	r3, [pc, #548]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d005      	beq.n	8000d86 <HAL_RCC_OscConfig+0x62>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e3a2      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a1a      	ldr	r2, [r3, #32]
 8000d8a:	4b82      	ldr	r3, [pc, #520]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <HAL_RCC_OscConfig+0x7c>
 8000d96:	4b7f      	ldr	r3, [pc, #508]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000d9e:	e005      	b.n	8000dac <HAL_RCC_OscConfig+0x88>
 8000da0:	4b7c      	ldr	r3, [pc, #496]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d223      	bcs.n	8000df8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fd1d 	bl	80017f4 <RCC_SetFlashLatencyFromMSIRange>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e383      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dc4:	4b73      	ldr	r3, [pc, #460]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a72      	ldr	r2, [pc, #456]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	4b70      	ldr	r3, [pc, #448]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	496d      	ldr	r1, [pc, #436]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de2:	4b6c      	ldr	r3, [pc, #432]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	4968      	ldr	r1, [pc, #416]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	604b      	str	r3, [r1, #4]
 8000df6:	e025      	b.n	8000e44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df8:	4b66      	ldr	r3, [pc, #408]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a65      	ldr	r2, [pc, #404]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b63      	ldr	r3, [pc, #396]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	4960      	ldr	r1, [pc, #384]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e16:	4b5f      	ldr	r3, [pc, #380]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	495b      	ldr	r1, [pc, #364]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d109      	bne.n	8000e44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fcdd 	bl	80017f4 <RCC_SetFlashLatencyFromMSIRange>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e343      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e44:	f000 fc4a 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b52      	ldr	r3, [pc, #328]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	f003 030f 	and.w	r3, r3, #15
 8000e54:	4950      	ldr	r1, [pc, #320]	@ (8000f98 <HAL_RCC_OscConfig+0x274>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	4a4e      	ldr	r2, [pc, #312]	@ (8000f9c <HAL_RCC_OscConfig+0x278>)
 8000e62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e64:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa0 <HAL_RCC_OscConfig+0x27c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fbf3 	bl	8000654 <HAL_InitTick>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d052      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	e327      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d032      	beq.n	8000eea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e84:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a42      	ldr	r2, [pc, #264]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fc30 	bl	80006f4 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc2c 	bl	80006f4 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e310      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eb6:	4b37      	ldr	r3, [pc, #220]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a36      	ldr	r2, [pc, #216]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	f043 0308 	orr.w	r3, r3, #8
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b34      	ldr	r3, [pc, #208]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	4931      	ldr	r1, [pc, #196]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	492c      	ldr	r1, [pc, #176]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	e01a      	b.n	8000f20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eea:	4b2a      	ldr	r3, [pc, #168]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a29      	ldr	r2, [pc, #164]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fbfd 	bl	80006f4 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000efe:	f7ff fbf9 	bl	80006f4 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e2dd      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f10:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f0      	bne.n	8000efe <HAL_RCC_OscConfig+0x1da>
 8000f1c:	e000      	b.n	8000f20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d074      	beq.n	8001016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d005      	beq.n	8000f3e <HAL_RCC_OscConfig+0x21a>
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b0c      	cmp	r3, #12
 8000f36:	d10e      	bne.n	8000f56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d10b      	bne.n	8000f56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d064      	beq.n	8001014 <HAL_RCC_OscConfig+0x2f0>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d160      	bne.n	8001014 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e2ba      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x24a>
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0b      	ldr	r2, [pc, #44]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e026      	b.n	8000fbc <HAL_RCC_OscConfig+0x298>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f76:	d115      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x280>
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a02      	ldr	r2, [pc, #8]	@ (8000f94 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e014      	b.n	8000fbc <HAL_RCC_OscConfig+0x298>
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	0800272c 	.word	0x0800272c
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000004 	.word	0x20000004
 8000fa4:	4ba0      	ldr	r3, [pc, #640]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a9f      	ldr	r2, [pc, #636]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b9d      	ldr	r3, [pc, #628]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a9c      	ldr	r2, [pc, #624]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fb96 	bl	80006f4 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fb92 	bl	80006f4 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	@ 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e276      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fde:	4b92      	ldr	r3, [pc, #584]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x2a8>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb82 	bl	80006f4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fb7e 	bl	80006f4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	@ 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e262      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001006:	4b88      	ldr	r3, [pc, #544]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x2d0>
 8001012:	e000      	b.n	8001016 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d060      	beq.n	80010e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2b04      	cmp	r3, #4
 8001026:	d005      	beq.n	8001034 <HAL_RCC_OscConfig+0x310>
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2b0c      	cmp	r3, #12
 800102c:	d119      	bne.n	8001062 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d116      	bne.n	8001062 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001034:	4b7c      	ldr	r3, [pc, #496]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_RCC_OscConfig+0x328>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e23f      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b76      	ldr	r3, [pc, #472]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	061b      	lsls	r3, r3, #24
 800105a:	4973      	ldr	r1, [pc, #460]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001060:	e040      	b.n	80010e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d023      	beq.n	80010b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106a:	4b6f      	ldr	r3, [pc, #444]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6e      	ldr	r2, [pc, #440]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001076:	f7ff fb3d 	bl	80006f4 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800107e:	f7ff fb39 	bl	80006f4 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e21d      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001090:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109c:	4b62      	ldr	r3, [pc, #392]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	061b      	lsls	r3, r3, #24
 80010aa:	495f      	ldr	r1, [pc, #380]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
 80010b0:	e018      	b.n	80010e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a5c      	ldr	r2, [pc, #368]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 80010b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010be:	f7ff fb19 	bl	80006f4 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fb15 	bl	80006f4 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e1f9      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010d8:	4b53      	ldr	r3, [pc, #332]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f0      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d03c      	beq.n	800116a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d01c      	beq.n	8001132 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 80010fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001108:	f7ff faf4 	bl	80006f4 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff faf0 	bl	80006f4 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e1d4      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001122:	4b41      	ldr	r3, [pc, #260]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001124:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0ef      	beq.n	8001110 <HAL_RCC_OscConfig+0x3ec>
 8001130:	e01b      	b.n	800116a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001132:	4b3d      	ldr	r3, [pc, #244]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001138:	4a3b      	ldr	r2, [pc, #236]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001142:	f7ff fad7 	bl	80006f4 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800114a:	f7ff fad3 	bl	80006f4 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e1b7      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800115c:	4b32      	ldr	r3, [pc, #200]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1ef      	bne.n	800114a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	f000 80a6 	beq.w	80012c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800117c:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10d      	bne.n	80011a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118c:	4a26      	ldr	r2, [pc, #152]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6593      	str	r3, [r2, #88]	@ 0x58
 8001194:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a0:	2301      	movs	r3, #1
 80011a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a4:	4b21      	ldr	r3, [pc, #132]	@ (800122c <HAL_RCC_OscConfig+0x508>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d118      	bne.n	80011e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011b0:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <HAL_RCC_OscConfig+0x508>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <HAL_RCC_OscConfig+0x508>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011bc:	f7ff fa9a 	bl	80006f4 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c4:	f7ff fa96 	bl	80006f4 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e17a      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_RCC_OscConfig+0x508>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <HAL_RCC_OscConfig+0x4d8>
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 80011ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011fa:	e029      	b.n	8001250 <HAL_RCC_OscConfig+0x52c>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d115      	bne.n	8001230 <HAL_RCC_OscConfig+0x50c>
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800120a:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 8001216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800121a:	4a03      	ldr	r2, [pc, #12]	@ (8001228 <HAL_RCC_OscConfig+0x504>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001224:	e014      	b.n	8001250 <HAL_RCC_OscConfig+0x52c>
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	40007000 	.word	0x40007000
 8001230:	4b9c      	ldr	r3, [pc, #624]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001236:	4a9b      	ldr	r2, [pc, #620]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001238:	f023 0301 	bic.w	r3, r3, #1
 800123c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001240:	4b98      	ldr	r3, [pc, #608]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001246:	4a97      	ldr	r2, [pc, #604]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001248:	f023 0304 	bic.w	r3, r3, #4
 800124c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d016      	beq.n	8001286 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001258:	f7ff fa4c 	bl	80006f4 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800125e:	e00a      	b.n	8001276 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001260:	f7ff fa48 	bl	80006f4 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126e:	4293      	cmp	r3, r2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e12a      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001276:	4b8b      	ldr	r3, [pc, #556]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0ed      	beq.n	8001260 <HAL_RCC_OscConfig+0x53c>
 8001284:	e015      	b.n	80012b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001286:	f7ff fa35 	bl	80006f4 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800128c:	e00a      	b.n	80012a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff fa31 	bl	80006f4 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129c:	4293      	cmp	r3, r2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e113      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012a4:	4b7f      	ldr	r3, [pc, #508]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ed      	bne.n	800128e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b8:	4b7a      	ldr	r3, [pc, #488]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012bc:	4a79      	ldr	r2, [pc, #484]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80012be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80fe 	beq.w	80014ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	f040 80d0 	bne.w	8001478 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012d8:	4b72      	ldr	r3, [pc, #456]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d130      	bne.n	800134e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	3b01      	subs	r3, #1
 80012f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d127      	bne.n	800134e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001308:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800130a:	429a      	cmp	r2, r3
 800130c:	d11f      	bne.n	800134e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001318:	2a07      	cmp	r2, #7
 800131a:	bf14      	ite	ne
 800131c:	2201      	movne	r2, #1
 800131e:	2200      	moveq	r2, #0
 8001320:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001322:	4293      	cmp	r3, r2
 8001324:	d113      	bne.n	800134e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001330:	085b      	lsrs	r3, r3, #1
 8001332:	3b01      	subs	r3, #1
 8001334:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001336:	429a      	cmp	r2, r3
 8001338:	d109      	bne.n	800134e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	3b01      	subs	r3, #1
 8001348:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800134a:	429a      	cmp	r2, r3
 800134c:	d06e      	beq.n	800142c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b0c      	cmp	r3, #12
 8001352:	d069      	beq.n	8001428 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001354:	4b53      	ldr	r3, [pc, #332]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d105      	bne.n	800136c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001360:	4b50      	ldr	r3, [pc, #320]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0ad      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001370:	4b4c      	ldr	r3, [pc, #304]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a4b      	ldr	r2, [pc, #300]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001376:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800137a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800137c:	f7ff f9ba 	bl	80006f4 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff f9b6 	bl	80006f4 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e09a      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001396:	4b43      	ldr	r3, [pc, #268]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a2:	4b40      	ldr	r3, [pc, #256]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <HAL_RCC_OscConfig+0x784>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80013b2:	3a01      	subs	r2, #1
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	4311      	orrs	r1, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80013bc:	0212      	lsls	r2, r2, #8
 80013be:	4311      	orrs	r1, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80013c4:	0852      	lsrs	r2, r2, #1
 80013c6:	3a01      	subs	r2, #1
 80013c8:	0552      	lsls	r2, r2, #21
 80013ca:	4311      	orrs	r1, r2
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013d0:	0852      	lsrs	r2, r2, #1
 80013d2:	3a01      	subs	r2, #1
 80013d4:	0652      	lsls	r2, r2, #25
 80013d6:	4311      	orrs	r1, r2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80013dc:	0912      	lsrs	r2, r2, #4
 80013de:	0452      	lsls	r2, r2, #17
 80013e0:	430a      	orrs	r2, r1
 80013e2:	4930      	ldr	r1, [pc, #192]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013e8:	4b2e      	ldr	r3, [pc, #184]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a2d      	ldr	r2, [pc, #180]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80013ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013f4:	4b2b      	ldr	r3, [pc, #172]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 80013fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001400:	f7ff f978 	bl	80006f4 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff f974 	bl	80006f4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e058      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001426:	e050      	b.n	80014ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e04f      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d148      	bne.n	80014ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 800143e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4a16      	ldr	r2, [pc, #88]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 800144a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800144e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001450:	f7ff f950 	bl	80006f4 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f94c 	bl	80006f4 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e030      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x734>
 8001476:	e028      	b.n	80014ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d023      	beq.n	80014c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a08      	ldr	r2, [pc, #32]	@ (80014a4 <HAL_RCC_OscConfig+0x780>)
 8001484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff f933 	bl	80006f4 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001490:	e00c      	b.n	80014ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001492:	f7ff f92f 	bl	80006f4 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d905      	bls.n	80014ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
 80014a4:	40021000 	.word	0x40021000
 80014a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_RCC_OscConfig+0x7b0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ec      	bne.n	8001492 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_RCC_OscConfig+0x7b0>)
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	4905      	ldr	r1, [pc, #20]	@ (80014d4 <HAL_RCC_OscConfig+0x7b0>)
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <HAL_RCC_OscConfig+0x7b4>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
 80014c4:	e001      	b.n	80014ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	feeefffc 	.word	0xfeeefffc

080014dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0e7      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b75      	ldr	r3, [pc, #468]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d910      	bls.n	8001520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b72      	ldr	r3, [pc, #456]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 0207 	bic.w	r2, r3, #7
 8001506:	4970      	ldr	r1, [pc, #448]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b6e      	ldr	r3, [pc, #440]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0cf      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d010      	beq.n	800154e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	4b66      	ldr	r3, [pc, #408]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001538:	429a      	cmp	r2, r3
 800153a:	d908      	bls.n	800154e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800153c:	4b63      	ldr	r3, [pc, #396]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4960      	ldr	r1, [pc, #384]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04c      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001562:	4b5a      	ldr	r3, [pc, #360]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d121      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0a6      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157a:	4b54      	ldr	r3, [pc, #336]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d115      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e09a      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001592:	4b4e      	ldr	r3, [pc, #312]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e08e      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a2:	4b4a      	ldr	r3, [pc, #296]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e086      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015b2:	4b46      	ldr	r3, [pc, #280]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 0203 	bic.w	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4943      	ldr	r1, [pc, #268]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015c4:	f7ff f896 	bl	80006f4 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015cc:	f7ff f892 	bl	80006f4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e06e      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	4b3a      	ldr	r3, [pc, #232]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 020c 	and.w	r2, r3, #12
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1eb      	bne.n	80015cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d010      	beq.n	8001622 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800160c:	429a      	cmp	r2, r3
 800160e:	d208      	bcs.n	8001622 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001610:	4b2e      	ldr	r3, [pc, #184]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	492b      	ldr	r1, [pc, #172]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001622:	4b29      	ldr	r3, [pc, #164]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d210      	bcs.n	8001652 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001630:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 0207 	bic.w	r2, r3, #7
 8001638:	4923      	ldr	r1, [pc, #140]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001640:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d001      	beq.n	8001652 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e036      	b.n	80016c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	4918      	ldr	r1, [pc, #96]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 800166c:	4313      	orrs	r3, r2
 800166e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4910      	ldr	r1, [pc, #64]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 800168c:	4313      	orrs	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001690:	f000 f824 	bl	80016dc <HAL_RCC_GetSysClockFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_RCC_ClockConfig+0x1f0>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	490b      	ldr	r1, [pc, #44]	@ (80016d0 <HAL_RCC_ClockConfig+0x1f4>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	4a09      	ldr	r2, [pc, #36]	@ (80016d4 <HAL_RCC_ClockConfig+0x1f8>)
 80016ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <HAL_RCC_ClockConfig+0x1fc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ffcd 	bl	8000654 <HAL_InitTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80016be:	7afb      	ldrb	r3, [r7, #11]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	0800272c 	.word	0x0800272c
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ea:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f4:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x34>
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d121      	bne.n	800174e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d11e      	bne.n	800174e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001710:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800171c:	4b31      	ldr	r3, [pc, #196]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e005      	b.n	8001738 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800172c:	4b2d      	ldr	r3, [pc, #180]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001738:	4a2b      	ldr	r2, [pc, #172]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b04      	cmp	r3, #4
 8001752:	d102      	bne.n	800175a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001754:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x110>)
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	e004      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2b08      	cmp	r3, #8
 800175e:	d101      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001760:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001762:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d134      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d003      	beq.n	8001782 <HAL_RCC_GetSysClockFreq+0xa6>
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d003      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0xac>
 8001780:	e005      	b.n	800178e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001782:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x110>)
 8001784:	617b      	str	r3, [r7, #20]
      break;
 8001786:	e005      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001788:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800178a:	617b      	str	r3, [r7, #20]
      break;
 800178c:	e002      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	617b      	str	r3, [r7, #20]
      break;
 8001792:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	3301      	adds	r3, #1
 80017a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	0a1b      	lsrs	r3, r3, #8
 80017a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	fb03 f202 	mul.w	r2, r3, r2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	0e5b      	lsrs	r3, r3, #25
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	3301      	adds	r3, #1
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80017d4:	69bb      	ldr	r3, [r7, #24]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	@ 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	0800273c 	.word	0x0800273c
 80017ec:	00f42400 	.word	0x00f42400
 80017f0:	007a1200 	.word	0x007a1200

080017f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001800:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800180c:	f7ff fa26 	bl	8000c5c <HAL_PWREx_GetVoltageRange>
 8001810:	6178      	str	r0, [r7, #20]
 8001812:	e014      	b.n	800183e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001818:	4a24      	ldr	r2, [pc, #144]	@ (80018ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800181a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001820:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800182c:	f7ff fa16 	bl	8000c5c <HAL_PWREx_GetVoltageRange>
 8001830:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001832:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001836:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001844:	d10b      	bne.n	800185e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b80      	cmp	r3, #128	@ 0x80
 800184a:	d919      	bls.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001850:	d902      	bls.n	8001858 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001852:	2302      	movs	r3, #2
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	e013      	b.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001858:	2301      	movs	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	e010      	b.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b80      	cmp	r3, #128	@ 0x80
 8001862:	d902      	bls.n	800186a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001864:	2303      	movs	r3, #3
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	e00a      	b.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b80      	cmp	r3, #128	@ 0x80
 800186e:	d102      	bne.n	8001876 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	e004      	b.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b70      	cmp	r3, #112	@ 0x70
 800187a:	d101      	bne.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800187c:	2301      	movs	r3, #1
 800187e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001880:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 0207 	bic.w	r2, r3, #7
 8001888:	4909      	ldr	r1, [pc, #36]	@ (80018b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	429a      	cmp	r2, r3
 800189c:	d001      	beq.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40022000 	.word	0x40022000

080018b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d001      	beq.n	80018cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e047      	b.n	800195c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a23      	ldr	r2, [pc, #140]	@ (8001968 <HAL_TIM_Base_Start+0xb4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d01d      	beq.n	800191a <HAL_TIM_Base_Start+0x66>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e6:	d018      	beq.n	800191a <HAL_TIM_Base_Start+0x66>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1f      	ldr	r2, [pc, #124]	@ (800196c <HAL_TIM_Base_Start+0xb8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_TIM_Base_Start+0x66>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001970 <HAL_TIM_Base_Start+0xbc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00e      	beq.n	800191a <HAL_TIM_Base_Start+0x66>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a1c      	ldr	r2, [pc, #112]	@ (8001974 <HAL_TIM_Base_Start+0xc0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d009      	beq.n	800191a <HAL_TIM_Base_Start+0x66>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1b      	ldr	r2, [pc, #108]	@ (8001978 <HAL_TIM_Base_Start+0xc4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d004      	beq.n	800191a <HAL_TIM_Base_Start+0x66>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	@ (800197c <HAL_TIM_Base_Start+0xc8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d115      	bne.n	8001946 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <HAL_TIM_Base_Start+0xcc>)
 8001922:	4013      	ands	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b06      	cmp	r3, #6
 800192a:	d015      	beq.n	8001958 <HAL_TIM_Base_Start+0xa4>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001932:	d011      	beq.n	8001958 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001944:	e008      	b.n	8001958 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e000      	b.n	800195a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40012c00 	.word	0x40012c00
 800196c:	40000400 	.word	0x40000400
 8001970:	40000800 	.word	0x40000800
 8001974:	40000c00 	.word	0x40000c00
 8001978:	40013400 	.word	0x40013400
 800197c:	40014000 	.word	0x40014000
 8001980:	00010007 	.word	0x00010007

08001984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e049      	b.n	8001a2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d106      	bne.n	80019b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7fe fdb6 	bl	800051c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3304      	adds	r3, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4610      	mov	r0, r2
 80019c4:	f000 fa50 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d109      	bne.n	8001a58 <HAL_TIM_PWM_Start+0x24>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	e03c      	b.n	8001ad2 <HAL_TIM_PWM_Start+0x9e>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d109      	bne.n	8001a72 <HAL_TIM_PWM_Start+0x3e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	bf14      	ite	ne
 8001a6a:	2301      	movne	r3, #1
 8001a6c:	2300      	moveq	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	e02f      	b.n	8001ad2 <HAL_TIM_PWM_Start+0x9e>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d109      	bne.n	8001a8c <HAL_TIM_PWM_Start+0x58>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	e022      	b.n	8001ad2 <HAL_TIM_PWM_Start+0x9e>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d109      	bne.n	8001aa6 <HAL_TIM_PWM_Start+0x72>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	bf14      	ite	ne
 8001a9e:	2301      	movne	r3, #1
 8001aa0:	2300      	moveq	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	e015      	b.n	8001ad2 <HAL_TIM_PWM_Start+0x9e>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b10      	cmp	r3, #16
 8001aaa:	d109      	bne.n	8001ac0 <HAL_TIM_PWM_Start+0x8c>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	e008      	b.n	8001ad2 <HAL_TIM_PWM_Start+0x9e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e09c      	b.n	8001c14 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d104      	bne.n	8001aea <HAL_TIM_PWM_Start+0xb6>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ae8:	e023      	b.n	8001b32 <HAL_TIM_PWM_Start+0xfe>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d104      	bne.n	8001afa <HAL_TIM_PWM_Start+0xc6>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001af8:	e01b      	b.n	8001b32 <HAL_TIM_PWM_Start+0xfe>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d104      	bne.n	8001b0a <HAL_TIM_PWM_Start+0xd6>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b08:	e013      	b.n	8001b32 <HAL_TIM_PWM_Start+0xfe>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b0c      	cmp	r3, #12
 8001b0e:	d104      	bne.n	8001b1a <HAL_TIM_PWM_Start+0xe6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b18:	e00b      	b.n	8001b32 <HAL_TIM_PWM_Start+0xfe>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d104      	bne.n	8001b2a <HAL_TIM_PWM_Start+0xf6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b28:	e003      	b.n	8001b32 <HAL_TIM_PWM_Start+0xfe>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2201      	movs	r2, #1
 8001b38:	6839      	ldr	r1, [r7, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 fd10 	bl	8002560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a35      	ldr	r2, [pc, #212]	@ (8001c1c <HAL_TIM_PWM_Start+0x1e8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_TIM_PWM_Start+0x13e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a34      	ldr	r2, [pc, #208]	@ (8001c20 <HAL_TIM_PWM_Start+0x1ec>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <HAL_TIM_PWM_Start+0x13e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a32      	ldr	r2, [pc, #200]	@ (8001c24 <HAL_TIM_PWM_Start+0x1f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d009      	beq.n	8001b72 <HAL_TIM_PWM_Start+0x13e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a31      	ldr	r2, [pc, #196]	@ (8001c28 <HAL_TIM_PWM_Start+0x1f4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_TIM_PWM_Start+0x13e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <HAL_TIM_PWM_Start+0x1f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_PWM_Start+0x142>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_TIM_PWM_Start+0x144>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a22      	ldr	r2, [pc, #136]	@ (8001c1c <HAL_TIM_PWM_Start+0x1e8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d01d      	beq.n	8001bd2 <HAL_TIM_PWM_Start+0x19e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b9e:	d018      	beq.n	8001bd2 <HAL_TIM_PWM_Start+0x19e>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <HAL_TIM_PWM_Start+0x1fc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_TIM_PWM_Start+0x19e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <HAL_TIM_PWM_Start+0x200>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_TIM_PWM_Start+0x19e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c38 <HAL_TIM_PWM_Start+0x204>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_TIM_PWM_Start+0x19e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a17      	ldr	r2, [pc, #92]	@ (8001c20 <HAL_TIM_PWM_Start+0x1ec>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d004      	beq.n	8001bd2 <HAL_TIM_PWM_Start+0x19e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <HAL_TIM_PWM_Start+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d115      	bne.n	8001bfe <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <HAL_TIM_PWM_Start+0x208>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	d015      	beq.n	8001c10 <HAL_TIM_PWM_Start+0x1dc>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bea:	d011      	beq.n	8001c10 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfc:	e008      	b.n	8001c10 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e000      	b.n	8001c12 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40013400 	.word	0x40013400
 8001c24:	40014000 	.word	0x40014000
 8001c28:	40014400 	.word	0x40014400
 8001c2c:	40014800 	.word	0x40014800
 8001c30:	40000400 	.word	0x40000400
 8001c34:	40000800 	.word	0x40000800
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	00010007 	.word	0x00010007

08001c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e0ff      	b.n	8001e5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b14      	cmp	r3, #20
 8001c6a:	f200 80f0 	bhi.w	8001e4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001cc9 	.word	0x08001cc9
 8001c78:	08001e4f 	.word	0x08001e4f
 8001c7c:	08001e4f 	.word	0x08001e4f
 8001c80:	08001e4f 	.word	0x08001e4f
 8001c84:	08001d09 	.word	0x08001d09
 8001c88:	08001e4f 	.word	0x08001e4f
 8001c8c:	08001e4f 	.word	0x08001e4f
 8001c90:	08001e4f 	.word	0x08001e4f
 8001c94:	08001d4b 	.word	0x08001d4b
 8001c98:	08001e4f 	.word	0x08001e4f
 8001c9c:	08001e4f 	.word	0x08001e4f
 8001ca0:	08001e4f 	.word	0x08001e4f
 8001ca4:	08001d8b 	.word	0x08001d8b
 8001ca8:	08001e4f 	.word	0x08001e4f
 8001cac:	08001e4f 	.word	0x08001e4f
 8001cb0:	08001e4f 	.word	0x08001e4f
 8001cb4:	08001dcd 	.word	0x08001dcd
 8001cb8:	08001e4f 	.word	0x08001e4f
 8001cbc:	08001e4f 	.word	0x08001e4f
 8001cc0:	08001e4f 	.word	0x08001e4f
 8001cc4:	08001e0d 	.word	0x08001e0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f970 	bl	8001fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0208 	orr.w	r2, r2, #8
 8001ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0204 	bic.w	r2, r2, #4
 8001cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6999      	ldr	r1, [r3, #24]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	619a      	str	r2, [r3, #24]
      break;
 8001d06:	e0a5      	b.n	8001e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f9e0 	bl	80020d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6999      	ldr	r1, [r3, #24]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	021a      	lsls	r2, r3, #8
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	619a      	str	r2, [r3, #24]
      break;
 8001d48:	e084      	b.n	8001e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fa49 	bl	80021e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0208 	orr.w	r2, r2, #8
 8001d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0204 	bic.w	r2, r2, #4
 8001d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69d9      	ldr	r1, [r3, #28]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	61da      	str	r2, [r3, #28]
      break;
 8001d88:	e064      	b.n	8001e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fab1 	bl	80022f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69d9      	ldr	r1, [r3, #28]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	021a      	lsls	r2, r3, #8
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	61da      	str	r2, [r3, #28]
      break;
 8001dca:	e043      	b.n	8001e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fafa 	bl	80023cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0208 	orr.w	r2, r2, #8
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0204 	bic.w	r2, r2, #4
 8001df6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001e0a:	e023      	b.n	8001e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 fb3e 	bl	8002494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	021a      	lsls	r2, r3, #8
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8001e4c:	e002      	b.n	8001e54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
      break;
 8001e52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a46      	ldr	r2, [pc, #280]	@ (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e86:	d00f      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a43      	ldr	r2, [pc, #268]	@ (8001f98 <TIM_Base_SetConfig+0x130>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00b      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a42      	ldr	r2, [pc, #264]	@ (8001f9c <TIM_Base_SetConfig+0x134>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a41      	ldr	r2, [pc, #260]	@ (8001fa0 <TIM_Base_SetConfig+0x138>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a40      	ldr	r2, [pc, #256]	@ (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a35      	ldr	r2, [pc, #212]	@ (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d01f      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d01b      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a32      	ldr	r2, [pc, #200]	@ (8001f98 <TIM_Base_SetConfig+0x130>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d017      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a31      	ldr	r2, [pc, #196]	@ (8001f9c <TIM_Base_SetConfig+0x134>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a30      	ldr	r2, [pc, #192]	@ (8001fa0 <TIM_Base_SetConfig+0x138>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00f      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa8 <TIM_Base_SetConfig+0x140>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8001fac <TIM_Base_SetConfig+0x144>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <TIM_Base_SetConfig+0x9a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb0 <TIM_Base_SetConfig+0x148>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d108      	bne.n	8001f14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00f      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a18      	ldr	r2, [pc, #96]	@ (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00b      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <TIM_Base_SetConfig+0x140>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <TIM_Base_SetConfig+0x144>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a15      	ldr	r2, [pc, #84]	@ (8001fb0 <TIM_Base_SetConfig+0x148>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f023 0201 	bic.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]
  }
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	40013400 	.word	0x40013400
 8001fa8:	40014000 	.word	0x40014000
 8001fac:	40014400 	.word	0x40014400
 8001fb0:	40014800 	.word	0x40014800

08001fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 0201 	bic.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0303 	bic.w	r3, r3, #3
 8001fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f023 0302 	bic.w	r3, r3, #2
 8002000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a2c      	ldr	r2, [pc, #176]	@ (80020c0 <TIM_OC1_SetConfig+0x10c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00f      	beq.n	8002034 <TIM_OC1_SetConfig+0x80>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a2b      	ldr	r2, [pc, #172]	@ (80020c4 <TIM_OC1_SetConfig+0x110>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00b      	beq.n	8002034 <TIM_OC1_SetConfig+0x80>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a2a      	ldr	r2, [pc, #168]	@ (80020c8 <TIM_OC1_SetConfig+0x114>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <TIM_OC1_SetConfig+0x80>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a29      	ldr	r2, [pc, #164]	@ (80020cc <TIM_OC1_SetConfig+0x118>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_OC1_SetConfig+0x80>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a28      	ldr	r2, [pc, #160]	@ (80020d0 <TIM_OC1_SetConfig+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d10c      	bne.n	800204e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f023 0308 	bic.w	r3, r3, #8
 800203a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f023 0304 	bic.w	r3, r3, #4
 800204c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <TIM_OC1_SetConfig+0x10c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00f      	beq.n	8002076 <TIM_OC1_SetConfig+0xc2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1a      	ldr	r2, [pc, #104]	@ (80020c4 <TIM_OC1_SetConfig+0x110>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00b      	beq.n	8002076 <TIM_OC1_SetConfig+0xc2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <TIM_OC1_SetConfig+0x114>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <TIM_OC1_SetConfig+0xc2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <TIM_OC1_SetConfig+0x118>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <TIM_OC1_SetConfig+0xc2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a17      	ldr	r2, [pc, #92]	@ (80020d0 <TIM_OC1_SetConfig+0x11c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d111      	bne.n	800209a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800207c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	621a      	str	r2, [r3, #32]
}
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40013400 	.word	0x40013400
 80020c8:	40014000 	.word	0x40014000
 80020cc:	40014400 	.word	0x40014400
 80020d0:	40014800 	.word	0x40014800

080020d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 0210 	bic.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800210e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0320 	bic.w	r3, r3, #32
 8002122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a28      	ldr	r2, [pc, #160]	@ (80021d4 <TIM_OC2_SetConfig+0x100>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_OC2_SetConfig+0x6c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a27      	ldr	r2, [pc, #156]	@ (80021d8 <TIM_OC2_SetConfig+0x104>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10d      	bne.n	800215c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800215a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <TIM_OC2_SetConfig+0x100>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00f      	beq.n	8002184 <TIM_OC2_SetConfig+0xb0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <TIM_OC2_SetConfig+0x104>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00b      	beq.n	8002184 <TIM_OC2_SetConfig+0xb0>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <TIM_OC2_SetConfig+0x108>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <TIM_OC2_SetConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a1a      	ldr	r2, [pc, #104]	@ (80021e0 <TIM_OC2_SetConfig+0x10c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <TIM_OC2_SetConfig+0xb0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <TIM_OC2_SetConfig+0x110>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d113      	bne.n	80021ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800218a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	621a      	str	r2, [r3, #32]
}
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40013400 	.word	0x40013400
 80021dc:	40014000 	.word	0x40014000
 80021e0:	40014400 	.word	0x40014400
 80021e4:	40014800 	.word	0x40014800

080021e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800221a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0303 	bic.w	r3, r3, #3
 8002222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4313      	orrs	r3, r2
 8002240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a27      	ldr	r2, [pc, #156]	@ (80022e4 <TIM_OC3_SetConfig+0xfc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d003      	beq.n	8002252 <TIM_OC3_SetConfig+0x6a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a26      	ldr	r2, [pc, #152]	@ (80022e8 <TIM_OC3_SetConfig+0x100>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10d      	bne.n	800226e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4313      	orrs	r3, r2
 8002264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800226c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1c      	ldr	r2, [pc, #112]	@ (80022e4 <TIM_OC3_SetConfig+0xfc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00f      	beq.n	8002296 <TIM_OC3_SetConfig+0xae>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1b      	ldr	r2, [pc, #108]	@ (80022e8 <TIM_OC3_SetConfig+0x100>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00b      	beq.n	8002296 <TIM_OC3_SetConfig+0xae>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <TIM_OC3_SetConfig+0x104>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <TIM_OC3_SetConfig+0xae>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a19      	ldr	r2, [pc, #100]	@ (80022f0 <TIM_OC3_SetConfig+0x108>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d003      	beq.n	8002296 <TIM_OC3_SetConfig+0xae>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <TIM_OC3_SetConfig+0x10c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d113      	bne.n	80022be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800229c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	621a      	str	r2, [r3, #32]
}
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40013400 	.word	0x40013400
 80022ec:	40014000 	.word	0x40014000
 80022f0:	40014400 	.word	0x40014400
 80022f4:	40014800 	.word	0x40014800

080022f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800232a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	031b      	lsls	r3, r3, #12
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <TIM_OC4_SetConfig+0xc0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00f      	beq.n	800237c <TIM_OC4_SetConfig+0x84>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <TIM_OC4_SetConfig+0xc4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00b      	beq.n	800237c <TIM_OC4_SetConfig+0x84>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <TIM_OC4_SetConfig+0xc8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <TIM_OC4_SetConfig+0x84>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a15      	ldr	r2, [pc, #84]	@ (80023c4 <TIM_OC4_SetConfig+0xcc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_OC4_SetConfig+0x84>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <TIM_OC4_SetConfig+0xd0>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d109      	bne.n	8002390 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	621a      	str	r2, [r3, #32]
}
 80023aa:	bf00      	nop
 80023ac:	371c      	adds	r7, #28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40013400 	.word	0x40013400
 80023c0:	40014000 	.word	0x40014000
 80023c4:	40014400 	.word	0x40014400
 80023c8:	40014800 	.word	0x40014800

080023cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002410:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a17      	ldr	r2, [pc, #92]	@ (8002480 <TIM_OC5_SetConfig+0xb4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00f      	beq.n	8002446 <TIM_OC5_SetConfig+0x7a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a16      	ldr	r2, [pc, #88]	@ (8002484 <TIM_OC5_SetConfig+0xb8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00b      	beq.n	8002446 <TIM_OC5_SetConfig+0x7a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a15      	ldr	r2, [pc, #84]	@ (8002488 <TIM_OC5_SetConfig+0xbc>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <TIM_OC5_SetConfig+0x7a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a14      	ldr	r2, [pc, #80]	@ (800248c <TIM_OC5_SetConfig+0xc0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d003      	beq.n	8002446 <TIM_OC5_SetConfig+0x7a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a13      	ldr	r2, [pc, #76]	@ (8002490 <TIM_OC5_SetConfig+0xc4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d109      	bne.n	800245a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800244c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	621a      	str	r2, [r3, #32]
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40012c00 	.word	0x40012c00
 8002484:	40013400 	.word	0x40013400
 8002488:	40014000 	.word	0x40014000
 800248c:	40014400 	.word	0x40014400
 8002490:	40014800 	.word	0x40014800

08002494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80024da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	051b      	lsls	r3, r3, #20
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a18      	ldr	r2, [pc, #96]	@ (800254c <TIM_OC6_SetConfig+0xb8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d00f      	beq.n	8002510 <TIM_OC6_SetConfig+0x7c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a17      	ldr	r2, [pc, #92]	@ (8002550 <TIM_OC6_SetConfig+0xbc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00b      	beq.n	8002510 <TIM_OC6_SetConfig+0x7c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <TIM_OC6_SetConfig+0xc0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <TIM_OC6_SetConfig+0x7c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <TIM_OC6_SetConfig+0xc4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_OC6_SetConfig+0x7c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a14      	ldr	r2, [pc, #80]	@ (800255c <TIM_OC6_SetConfig+0xc8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d109      	bne.n	8002524 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	029b      	lsls	r3, r3, #10
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	621a      	str	r2, [r3, #32]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40013400 	.word	0x40013400
 8002554:	40014000 	.word	0x40014000
 8002558:	40014400 	.word	0x40014400
 800255c:	40014800 	.word	0x40014800

08002560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2201      	movs	r2, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	43db      	mvns	r3, r3
 8002582:	401a      	ands	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	431a      	orrs	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	621a      	str	r2, [r3, #32]
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e068      	b.n	8002696 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2e      	ldr	r2, [pc, #184]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2d      	ldr	r2, [pc, #180]	@ (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d108      	bne.n	800260a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80025fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1e      	ldr	r2, [pc, #120]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01d      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002636:	d018      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1a      	ldr	r2, [pc, #104]	@ (80026b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00e      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a18      	ldr	r2, [pc, #96]	@ (80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a13      	ldr	r2, [pc, #76]	@ (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10c      	bne.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4313      	orrs	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40013400 	.word	0x40013400
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800
 80026b4:	40000c00 	.word	0x40000c00
 80026b8:	40014000 	.word	0x40014000

080026bc <memset>:
 80026bc:	4402      	add	r2, r0
 80026be:	4603      	mov	r3, r0
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d100      	bne.n	80026c6 <memset+0xa>
 80026c4:	4770      	bx	lr
 80026c6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ca:	e7f9      	b.n	80026c0 <memset+0x4>

080026cc <__libc_init_array>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002704 <__libc_init_array+0x38>)
 80026d0:	4c0d      	ldr	r4, [pc, #52]	@ (8002708 <__libc_init_array+0x3c>)
 80026d2:	1b64      	subs	r4, r4, r5
 80026d4:	10a4      	asrs	r4, r4, #2
 80026d6:	2600      	movs	r6, #0
 80026d8:	42a6      	cmp	r6, r4
 80026da:	d109      	bne.n	80026f0 <__libc_init_array+0x24>
 80026dc:	4d0b      	ldr	r5, [pc, #44]	@ (800270c <__libc_init_array+0x40>)
 80026de:	4c0c      	ldr	r4, [pc, #48]	@ (8002710 <__libc_init_array+0x44>)
 80026e0:	f000 f818 	bl	8002714 <_init>
 80026e4:	1b64      	subs	r4, r4, r5
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	2600      	movs	r6, #0
 80026ea:	42a6      	cmp	r6, r4
 80026ec:	d105      	bne.n	80026fa <__libc_init_array+0x2e>
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
 80026f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f4:	4798      	blx	r3
 80026f6:	3601      	adds	r6, #1
 80026f8:	e7ee      	b.n	80026d8 <__libc_init_array+0xc>
 80026fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fe:	4798      	blx	r3
 8002700:	3601      	adds	r6, #1
 8002702:	e7f2      	b.n	80026ea <__libc_init_array+0x1e>
 8002704:	0800276c 	.word	0x0800276c
 8002708:	0800276c 	.word	0x0800276c
 800270c:	0800276c 	.word	0x0800276c
 8002710:	08002770 	.word	0x08002770

08002714 <_init>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr

08002720 <_fini>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr
