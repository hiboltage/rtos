
us_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005ef4  08005ef4  00006ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f94  08005f94  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f94  08005f94  00006f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f9c  08005f9c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f9c  08005f9c  00006f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fa0  08005fa0  00006fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005fa4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000005c  08006000  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08006000  00007360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010301  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223b  00000000  00000000  0001738d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  000195c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b64  00000000  00000000  0001a468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002703c  00000000  00000000  0001afcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001220f  00000000  00000000  00042008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2510  00000000  00000000  00054217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000428c  00000000  00000000  0014676c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005edc 	.word	0x08005edc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005edc 	.word	0x08005edc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b96a 	b.w	80008d4 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	460c      	mov	r4, r1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d14e      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000624:	4694      	mov	ip, r2
 8000626:	458c      	cmp	ip, r1
 8000628:	4686      	mov	lr, r0
 800062a:	fab2 f282 	clz	r2, r2
 800062e:	d962      	bls.n	80006f6 <__udivmoddi4+0xde>
 8000630:	b14a      	cbz	r2, 8000646 <__udivmoddi4+0x2e>
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	4091      	lsls	r1, r2
 8000638:	fa20 f303 	lsr.w	r3, r0, r3
 800063c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	fa00 fe02 	lsl.w	lr, r0, r2
 8000646:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800064a:	fa1f f68c 	uxth.w	r6, ip
 800064e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000652:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000656:	fb07 1114 	mls	r1, r7, r4, r1
 800065a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065e:	fb04 f106 	mul.w	r1, r4, r6
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f104 30ff 	add.w	r0, r4, #4294967295
 800066e:	f080 8112 	bcs.w	8000896 <__udivmoddi4+0x27e>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 810f 	bls.w	8000896 <__udivmoddi4+0x27e>
 8000678:	3c02      	subs	r4, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a59      	subs	r1, r3, r1
 800067e:	fa1f f38e 	uxth.w	r3, lr
 8000682:	fbb1 f0f7 	udiv	r0, r1, r7
 8000686:	fb07 1110 	mls	r1, r7, r0, r1
 800068a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800068e:	fb00 f606 	mul.w	r6, r0, r6
 8000692:	429e      	cmp	r6, r3
 8000694:	d90a      	bls.n	80006ac <__udivmoddi4+0x94>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f100 31ff 	add.w	r1, r0, #4294967295
 800069e:	f080 80fc 	bcs.w	800089a <__udivmoddi4+0x282>
 80006a2:	429e      	cmp	r6, r3
 80006a4:	f240 80f9 	bls.w	800089a <__udivmoddi4+0x282>
 80006a8:	4463      	add	r3, ip
 80006aa:	3802      	subs	r0, #2
 80006ac:	1b9b      	subs	r3, r3, r6
 80006ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006b2:	2100      	movs	r1, #0
 80006b4:	b11d      	cbz	r5, 80006be <__udivmoddi4+0xa6>
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	e9c5 3200 	strd	r3, r2, [r5]
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d905      	bls.n	80006d2 <__udivmoddi4+0xba>
 80006c6:	b10d      	cbz	r5, 80006cc <__udivmoddi4+0xb4>
 80006c8:	e9c5 0100 	strd	r0, r1, [r5]
 80006cc:	2100      	movs	r1, #0
 80006ce:	4608      	mov	r0, r1
 80006d0:	e7f5      	b.n	80006be <__udivmoddi4+0xa6>
 80006d2:	fab3 f183 	clz	r1, r3
 80006d6:	2900      	cmp	r1, #0
 80006d8:	d146      	bne.n	8000768 <__udivmoddi4+0x150>
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xcc>
 80006de:	4290      	cmp	r0, r2
 80006e0:	f0c0 80f0 	bcc.w	80008c4 <__udivmoddi4+0x2ac>
 80006e4:	1a86      	subs	r6, r0, r2
 80006e6:	eb64 0303 	sbc.w	r3, r4, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d0e6      	beq.n	80006be <__udivmoddi4+0xa6>
 80006f0:	e9c5 6300 	strd	r6, r3, [r5]
 80006f4:	e7e3      	b.n	80006be <__udivmoddi4+0xa6>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	f040 8090 	bne.w	800081c <__udivmoddi4+0x204>
 80006fc:	eba1 040c 	sub.w	r4, r1, ip
 8000700:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000704:	fa1f f78c 	uxth.w	r7, ip
 8000708:	2101      	movs	r1, #1
 800070a:	fbb4 f6f8 	udiv	r6, r4, r8
 800070e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000712:	fb08 4416 	mls	r4, r8, r6, r4
 8000716:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800071a:	fb07 f006 	mul.w	r0, r7, r6
 800071e:	4298      	cmp	r0, r3
 8000720:	d908      	bls.n	8000734 <__udivmoddi4+0x11c>
 8000722:	eb1c 0303 	adds.w	r3, ip, r3
 8000726:	f106 34ff 	add.w	r4, r6, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x11a>
 800072c:	4298      	cmp	r0, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2b4>
 8000732:	4626      	mov	r6, r4
 8000734:	1a1c      	subs	r4, r3, r0
 8000736:	fa1f f38e 	uxth.w	r3, lr
 800073a:	fbb4 f0f8 	udiv	r0, r4, r8
 800073e:	fb08 4410 	mls	r4, r8, r0, r4
 8000742:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000746:	fb00 f707 	mul.w	r7, r0, r7
 800074a:	429f      	cmp	r7, r3
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0x148>
 800074e:	eb1c 0303 	adds.w	r3, ip, r3
 8000752:	f100 34ff 	add.w	r4, r0, #4294967295
 8000756:	d202      	bcs.n	800075e <__udivmoddi4+0x146>
 8000758:	429f      	cmp	r7, r3
 800075a:	f200 80b0 	bhi.w	80008be <__udivmoddi4+0x2a6>
 800075e:	4620      	mov	r0, r4
 8000760:	1bdb      	subs	r3, r3, r7
 8000762:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000766:	e7a5      	b.n	80006b4 <__udivmoddi4+0x9c>
 8000768:	f1c1 0620 	rsb	r6, r1, #32
 800076c:	408b      	lsls	r3, r1
 800076e:	fa22 f706 	lsr.w	r7, r2, r6
 8000772:	431f      	orrs	r7, r3
 8000774:	fa20 fc06 	lsr.w	ip, r0, r6
 8000778:	fa04 f301 	lsl.w	r3, r4, r1
 800077c:	ea43 030c 	orr.w	r3, r3, ip
 8000780:	40f4      	lsrs	r4, r6
 8000782:	fa00 f801 	lsl.w	r8, r0, r1
 8000786:	0c38      	lsrs	r0, r7, #16
 8000788:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800078c:	fbb4 fef0 	udiv	lr, r4, r0
 8000790:	fa1f fc87 	uxth.w	ip, r7
 8000794:	fb00 441e 	mls	r4, r0, lr, r4
 8000798:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079c:	fb0e f90c 	mul.w	r9, lr, ip
 80007a0:	45a1      	cmp	r9, r4
 80007a2:	fa02 f201 	lsl.w	r2, r2, r1
 80007a6:	d90a      	bls.n	80007be <__udivmoddi4+0x1a6>
 80007a8:	193c      	adds	r4, r7, r4
 80007aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007ae:	f080 8084 	bcs.w	80008ba <__udivmoddi4+0x2a2>
 80007b2:	45a1      	cmp	r9, r4
 80007b4:	f240 8081 	bls.w	80008ba <__udivmoddi4+0x2a2>
 80007b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007bc:	443c      	add	r4, r7
 80007be:	eba4 0409 	sub.w	r4, r4, r9
 80007c2:	fa1f f983 	uxth.w	r9, r3
 80007c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007ca:	fb00 4413 	mls	r4, r0, r3, r4
 80007ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007d6:	45a4      	cmp	ip, r4
 80007d8:	d907      	bls.n	80007ea <__udivmoddi4+0x1d2>
 80007da:	193c      	adds	r4, r7, r4
 80007dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80007e0:	d267      	bcs.n	80008b2 <__udivmoddi4+0x29a>
 80007e2:	45a4      	cmp	ip, r4
 80007e4:	d965      	bls.n	80008b2 <__udivmoddi4+0x29a>
 80007e6:	3b02      	subs	r3, #2
 80007e8:	443c      	add	r4, r7
 80007ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007ee:	fba0 9302 	umull	r9, r3, r0, r2
 80007f2:	eba4 040c 	sub.w	r4, r4, ip
 80007f6:	429c      	cmp	r4, r3
 80007f8:	46ce      	mov	lr, r9
 80007fa:	469c      	mov	ip, r3
 80007fc:	d351      	bcc.n	80008a2 <__udivmoddi4+0x28a>
 80007fe:	d04e      	beq.n	800089e <__udivmoddi4+0x286>
 8000800:	b155      	cbz	r5, 8000818 <__udivmoddi4+0x200>
 8000802:	ebb8 030e 	subs.w	r3, r8, lr
 8000806:	eb64 040c 	sbc.w	r4, r4, ip
 800080a:	fa04 f606 	lsl.w	r6, r4, r6
 800080e:	40cb      	lsrs	r3, r1
 8000810:	431e      	orrs	r6, r3
 8000812:	40cc      	lsrs	r4, r1
 8000814:	e9c5 6400 	strd	r6, r4, [r5]
 8000818:	2100      	movs	r1, #0
 800081a:	e750      	b.n	80006be <__udivmoddi4+0xa6>
 800081c:	f1c2 0320 	rsb	r3, r2, #32
 8000820:	fa20 f103 	lsr.w	r1, r0, r3
 8000824:	fa0c fc02 	lsl.w	ip, ip, r2
 8000828:	fa24 f303 	lsr.w	r3, r4, r3
 800082c:	4094      	lsls	r4, r2
 800082e:	430c      	orrs	r4, r1
 8000830:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000834:	fa00 fe02 	lsl.w	lr, r0, r2
 8000838:	fa1f f78c 	uxth.w	r7, ip
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3110 	mls	r1, r8, r0, r3
 8000844:	0c23      	lsrs	r3, r4, #16
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb00 f107 	mul.w	r1, r0, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x24c>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f100 36ff 	add.w	r6, r0, #4294967295
 800085a:	d22c      	bcs.n	80008b6 <__udivmoddi4+0x29e>
 800085c:	4299      	cmp	r1, r3
 800085e:	d92a      	bls.n	80008b6 <__udivmoddi4+0x29e>
 8000860:	3802      	subs	r0, #2
 8000862:	4463      	add	r3, ip
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f1f8 	udiv	r1, r3, r8
 800086c:	fb08 3311 	mls	r3, r8, r1, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb01 f307 	mul.w	r3, r1, r7
 8000878:	42a3      	cmp	r3, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x276>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f101 36ff 	add.w	r6, r1, #4294967295
 8000884:	d213      	bcs.n	80008ae <__udivmoddi4+0x296>
 8000886:	42a3      	cmp	r3, r4
 8000888:	d911      	bls.n	80008ae <__udivmoddi4+0x296>
 800088a:	3902      	subs	r1, #2
 800088c:	4464      	add	r4, ip
 800088e:	1ae4      	subs	r4, r4, r3
 8000890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000894:	e739      	b.n	800070a <__udivmoddi4+0xf2>
 8000896:	4604      	mov	r4, r0
 8000898:	e6f0      	b.n	800067c <__udivmoddi4+0x64>
 800089a:	4608      	mov	r0, r1
 800089c:	e706      	b.n	80006ac <__udivmoddi4+0x94>
 800089e:	45c8      	cmp	r8, r9
 80008a0:	d2ae      	bcs.n	8000800 <__udivmoddi4+0x1e8>
 80008a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008aa:	3801      	subs	r0, #1
 80008ac:	e7a8      	b.n	8000800 <__udivmoddi4+0x1e8>
 80008ae:	4631      	mov	r1, r6
 80008b0:	e7ed      	b.n	800088e <__udivmoddi4+0x276>
 80008b2:	4603      	mov	r3, r0
 80008b4:	e799      	b.n	80007ea <__udivmoddi4+0x1d2>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e7d4      	b.n	8000864 <__udivmoddi4+0x24c>
 80008ba:	46d6      	mov	lr, sl
 80008bc:	e77f      	b.n	80007be <__udivmoddi4+0x1a6>
 80008be:	4463      	add	r3, ip
 80008c0:	3802      	subs	r0, #2
 80008c2:	e74d      	b.n	8000760 <__udivmoddi4+0x148>
 80008c4:	4606      	mov	r6, r0
 80008c6:	4623      	mov	r3, r4
 80008c8:	4608      	mov	r0, r1
 80008ca:	e70f      	b.n	80006ec <__udivmoddi4+0xd4>
 80008cc:	3e02      	subs	r6, #2
 80008ce:	4463      	add	r3, ip
 80008d0:	e730      	b.n	8000734 <__udivmoddi4+0x11c>
 80008d2:	bf00      	nop

080008d4 <__aeabi_idiv0>:
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <MX_GPIO_Init+0xc4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	4a2a      	ldr	r2, [pc, #168]	@ (800099c <MX_GPIO_Init+0xc4>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fa:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MX_GPIO_Init+0xc4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	4b25      	ldr	r3, [pc, #148]	@ (800099c <MX_GPIO_Init+0xc4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a24      	ldr	r2, [pc, #144]	@ (800099c <MX_GPIO_Init+0xc4>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b22      	ldr	r3, [pc, #136]	@ (800099c <MX_GPIO_Init+0xc4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b1f      	ldr	r3, [pc, #124]	@ (800099c <MX_GPIO_Init+0xc4>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <MX_GPIO_Init+0xc4>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_GPIO_Init+0xc4>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_GPIO_Init+0xc4>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a18      	ldr	r2, [pc, #96]	@ (800099c <MX_GPIO_Init+0xc4>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_GPIO_Init+0xc4>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2120      	movs	r1, #32
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f000 ff37 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000960:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <MX_GPIO_Init+0xc8>)
 8000972:	f000 fd7f 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2320      	movs	r3, #32
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f000 fd70 	bl	8001474 <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fbd5 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f895 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f7ff ff91 	bl	80008d8 <MX_GPIO_Init>
  MX_TIM8_Init();
 80009b6:	f000 f98f 	bl	8000cd8 <MX_TIM8_Init>
  MX_TIM16_Init();
 80009ba:	f000 fa09 	bl	8000dd0 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80009be:	f000 fb15 	bl	8000fec <MX_USART2_UART_Init>
  // Trigger on for 10us and a period of 100ms.
  // 80MHz/200(Prescale) = 400kHz or 2.5us
  // 2.5us * 40,000(ARR) = 100ms
  // CCR1 set to 3 making 2.5us * (3+1) = 10us pulse

  HAL_TIM_Base_Start(&htim16);					// start TIM16
 80009c2:	4839      	ldr	r0, [pc, #228]	@ (8000aa8 <main+0x104>)
 80009c4:	f002 fa90 	bl	8002ee8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);					// start TIM8
 80009c8:	4838      	ldr	r0, [pc, #224]	@ (8000aac <main+0x108>)
 80009ca:	f002 fa8d 	bl	8002ee8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);	// start PWM generation on TIM16
 80009ce:	2100      	movs	r1, #0
 80009d0:	4835      	ldr	r0, [pc, #212]	@ (8000aa8 <main+0x104>)
 80009d2:	f002 fb53 	bl	800307c <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim8, TIM_CHANNEL_1);		// TIM8 input capture
 80009d6:	2100      	movs	r1, #0
 80009d8:	4834      	ldr	r0, [pc, #208]	@ (8000aac <main+0x108>)
 80009da:	f002 fcb7 	bl	800334c <HAL_TIM_IC_Start>

  TIM16->CCR1 = 3;	// set TIM16 CCR1 register to generate 10us signal every 100ms
 80009de:	4b34      	ldr	r3, [pc, #208]	@ (8000ab0 <main+0x10c>)
 80009e0:	2203      	movs	r2, #3
 80009e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GetTick() - delay >= 100) {
 80009e4:	f000 fc28 	bl	8001238 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <main+0x110>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	2b63      	cmp	r3, #99	@ 0x63
 80009f2:	d9f7      	bls.n	80009e4 <main+0x40>
		  delay = HAL_GetTick();									// get new delay value
 80009f4:	f000 fc20 	bl	8001238 <HAL_GetTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab4 <main+0x110>)
 80009fc:	6013      	str	r3, [r2, #0]
		  echo = HAL_TIM_ReadCapturedValue(&htim8, TIM_CHANNEL_1);	// get new echo value
 80009fe:	2100      	movs	r1, #0
 8000a00:	482a      	ldr	r0, [pc, #168]	@ (8000aac <main+0x108>)
 8000a02:	f003 f899 	bl	8003b38 <HAL_TIM_ReadCapturedValue>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab8 <main+0x114>)
 8000a0a:	6013      	str	r3, [r2, #0]

		  // calculate distance
		  dist = echo / 58.0f;
 8000a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <main+0x114>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a18:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8000abc <main+0x118>
 8000a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a20:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <main+0x11c>)
 8000a22:	edc3 7a00 	vstr	s15, [r3]
		  dist_int_part = (int)dist;
 8000a26:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <main+0x11c>)
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <main+0x120>)
 8000a36:	edc3 7a00 	vstr	s15, [r3]
		  dist_frac_part = (int)((dist - dist_int_part) * 1000);
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <main+0x11c>)
 8000a3c:	ed93 7a00 	vldr	s14, [r3]
 8000a40:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <main+0x120>)
 8000a42:	edd3 7a00 	vldr	s15, [r3]
 8000a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a4a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac8 <main+0x124>
 8000a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <main+0x128>)
 8000a5c:	edc3 7a00 	vstr	s15, [r3]

		  // write formatted string to buffer
		  snprintf(buffer, sizeof(buffer),
 8000a60:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <main+0x114>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	461e      	mov	r6, r3
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <main+0x120>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fd64 	bl	8000538 <__aeabi_f2d>
 8000a70:	4604      	mov	r4, r0
 8000a72:	460d      	mov	r5, r1
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <main+0x128>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd5d 	bl	8000538 <__aeabi_f2d>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	460b      	mov	r3, r1
 8000a82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000a86:	e9cd 4500 	strd	r4, r5, [sp]
 8000a8a:	4633      	mov	r3, r6
 8000a8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <main+0x12c>)
 8000a8e:	2164      	movs	r1, #100	@ 0x64
 8000a90:	4810      	ldr	r0, [pc, #64]	@ (8000ad4 <main+0x130>)
 8000a92:	f004 fd6f 	bl	8005574 <sniprintf>
				  "echo = %d, distance = %4d.%04d\r\n",
				  (int)echo, dist_int_part, dist_frac_part);

		  // write buffer to UART2
		  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(buffer), 1000);
 8000a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9a:	2264      	movs	r2, #100	@ 0x64
 8000a9c:	490d      	ldr	r1, [pc, #52]	@ (8000ad4 <main+0x130>)
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <main+0x134>)
 8000aa0:	f004 f80a 	bl	8004ab8 <HAL_UART_Transmit>
	  if (HAL_GetTick() - delay >= 100) {
 8000aa4:	e79e      	b.n	80009e4 <main+0x40>
 8000aa6:	bf00      	nop
 8000aa8:	20000140 	.word	0x20000140
 8000aac:	200000f4 	.word	0x200000f4
 8000ab0:	40014400 	.word	0x40014400
 8000ab4:	2000007c 	.word	0x2000007c
 8000ab8:	20000078 	.word	0x20000078
 8000abc:	42680000 	.word	0x42680000
 8000ac0:	20000080 	.word	0x20000080
 8000ac4:	20000084 	.word	0x20000084
 8000ac8:	447a0000 	.word	0x447a0000
 8000acc:	20000088 	.word	0x20000088
 8000ad0:	08005ef4 	.word	0x08005ef4
 8000ad4:	2000008c 	.word	0x2000008c
 8000ad8:	2000018c 	.word	0x2000018c

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b096      	sub	sp, #88	@ 0x58
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2244      	movs	r2, #68	@ 0x44
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 fd76 	bl	80055dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000afe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b02:	f000 fe87 	bl	8001814 <HAL_PWREx_ControlVoltageScaling>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b0c:	f000 f838 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b10:	2302      	movs	r3, #2
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b22:	2302      	movs	r3, #2
 8000b24:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b2a:	230a      	movs	r3, #10
 8000b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b32:	2302      	movs	r3, #2
 8000b34:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 febe 	bl	80018c0 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b4a:	f000 f819 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	230f      	movs	r3, #15
 8000b50:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2303      	movs	r3, #3
 8000b54:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	2104      	movs	r1, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f001 fa85 	bl	8002078 <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b74:	f000 f804 	bl	8000b80 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3758      	adds	r7, #88	@ 0x58
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <NMI_Handler+0x4>

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <MemManage_Handler+0x4>

08000bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 faf1 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000c3a:	f002 fc83 	bl	8003544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000140 	.word	0x20000140

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f004 fcb8 	bl	80055ec <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20018000 	.word	0x20018000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	200000f0 	.word	0x200000f0
 8000cb0:	20000360 	.word	0x20000360

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <MX_TIM8_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	@ 0x30
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d06:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d08:	4a30      	ldr	r2, [pc, #192]	@ (8000dcc <MX_TIM8_Init+0xf4>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d0e:	224f      	movs	r2, #79	@ 0x4f
 8000d10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b2d      	ldr	r3, [pc, #180]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d18:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b29      	ldr	r3, [pc, #164]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d26:	4b28      	ldr	r3, [pc, #160]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d32:	4825      	ldr	r0, [pc, #148]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d34:	f002 f880 	bl	8002e38 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8000d3e:	f7ff ff1f 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000d42:	4821      	ldr	r0, [pc, #132]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d44:	f002 faa0 	bl	8003288 <HAL_TIM_IC_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000d4e:	f7ff ff17 	bl	8000b80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d52:	2304      	movs	r3, #4
 8000d54:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d56:	2350      	movs	r3, #80	@ 0x50
 8000d58:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4817      	ldr	r0, [pc, #92]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d6a:	f002 fea3 	bl	8003ab4 <HAL_TIM_SlaveConfigSynchro>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM8_Init+0xa0>
  {
    Error_Handler();
 8000d74:	f7ff ff04 	bl	8000b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000d8c:	f003 fd22 	bl	80047d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000d96:	f7ff fef3 	bl	8000b80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <MX_TIM8_Init+0xf0>)
 8000db2:	f002 fcce 	bl	8003752 <HAL_TIM_IC_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 8000dbc:	f7ff fee0 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	3730      	adds	r7, #48	@ 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200000f4 	.word	0x200000f4
 8000dcc:	40013400 	.word	0x40013400

08000dd0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b092      	sub	sp, #72	@ 0x48
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	615a      	str	r2, [r3, #20]
 8000de8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	222c      	movs	r2, #44	@ 0x2c
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 fbf3 	bl	80055dc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000df6:	4b30      	ldr	r3, [pc, #192]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000df8:	4a30      	ldr	r2, [pc, #192]	@ (8000ebc <MX_TIM16_Init+0xec>)
 8000dfa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 199;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000dfe:	22c7      	movs	r2, #199	@ 0xc7
 8000e00:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 39999;
 8000e08:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e0a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8000e0e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e10:	4b29      	ldr	r3, [pc, #164]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e16:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b26      	ldr	r3, [pc, #152]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e22:	4825      	ldr	r0, [pc, #148]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e24:	f002 f808 	bl	8002e38 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000e2e:	f7ff fea7 	bl	8000b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000e32:	4821      	ldr	r0, [pc, #132]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e34:	f002 f8c0 	bl	8002fb8 <HAL_TIM_PWM_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000e3e:	f7ff fe9f 	bl	8000b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2360      	movs	r3, #96	@ 0x60
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e68:	f002 fd10 	bl	800388c <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000e72:	f7ff fe85 	bl	8000b80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000e9a:	f003 fd23 	bl	80048e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000ea4:	f7ff fe6c 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ea8:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <MX_TIM16_Init+0xe8>)
 8000eaa:	f000 f869 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000eae:	bf00      	nop
 8000eb0:	3748      	adds	r7, #72	@ 0x48
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000140 	.word	0x20000140
 8000ebc:	40014400 	.word	0x40014400

08000ec0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM8)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <HAL_TIM_Base_MspInit+0xb0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d128      	bne.n	8000f34 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ee2:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee6:	4a23      	ldr	r2, [pc, #140]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000ee8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a1d      	ldr	r2, [pc, #116]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b1b      	ldr	r3, [pc, #108]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f12:	2340      	movs	r3, #64	@ 0x40
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f22:	2303      	movs	r3, #3
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4812      	ldr	r0, [pc, #72]	@ (8000f78 <HAL_TIM_Base_MspInit+0xb8>)
 8000f2e:	f000 faa1 	bl	8001474 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8000f32:	e018      	b.n	8000f66 <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM16)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <HAL_TIM_Base_MspInit+0xbc>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d113      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f42:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_TIM_Base_MspInit+0xb4>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	210f      	movs	r1, #15
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f000 fa53 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f60:	2019      	movs	r0, #25
 8000f62:	f000 fa6c 	bl	800143e <HAL_NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013400 	.word	0x40013400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	48000800 	.word	0x48000800
 8000f7c:	40014400 	.word	0x40014400

08000f80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_TIM_MspPostInit+0x64>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11c      	bne.n	8000fdc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <HAL_TIM_MspPostInit+0x68>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	4a10      	ldr	r2, [pc, #64]	@ (8000fe8 <HAL_TIM_MspPostInit+0x68>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <HAL_TIM_MspPostInit+0x68>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fba:	2340      	movs	r3, #64	@ 0x40
 8000fbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000fca:	230e      	movs	r3, #14
 8000fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd8:	f000 fa4c 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40014400 	.word	0x40014400
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8000ff2:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <MX_USART2_UART_Init+0x5c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MX_USART2_UART_Init+0x58>)
 8001030:	f003 fcf4 	bl	8004a1c <HAL_UART_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800103a:	f7ff fda1 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000018c 	.word	0x2000018c
 8001048:	40004400 	.word	0x40004400

0800104c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ac      	sub	sp, #176	@ 0xb0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2288      	movs	r2, #136	@ 0x88
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fab5 	bl	80055dc <memset>
  if(uartHandle->Instance==USART2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <HAL_UART_MspInit+0xb0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d13b      	bne.n	80010f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800107c:	2302      	movs	r3, #2
 800107e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001080:	2300      	movs	r3, #0
 8001082:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fa19 	bl	80024c0 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001094:	f7ff fd74 	bl	8000b80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <HAL_UART_MspInit+0xb4>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109c:	4a18      	ldr	r2, [pc, #96]	@ (8001100 <HAL_UART_MspInit+0xb4>)
 800109e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_UART_MspInit+0xb4>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <HAL_UART_MspInit+0xb4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <HAL_UART_MspInit+0xb4>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010bc:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <HAL_UART_MspInit+0xb4>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010c8:	230c      	movs	r3, #12
 80010ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e0:	2307      	movs	r3, #7
 80010e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f000 f9c0 	bl	8001474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010f4:	bf00      	nop
 80010f6:	37b0      	adds	r7, #176	@ 0xb0
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40004400 	.word	0x40004400
 8001100:	40021000 	.word	0x40021000

08001104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800113c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001108:	f7ff fdd4 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	@ (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	@ (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	@ (8001148 <LoopForever+0xe>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	@ (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f004 fa61 	bl	80055f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001136:	f7ff fc35 	bl	80009a4 <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001148:	08005fa4 	.word	0x08005fa4
  ldr r2, =_sbss
 800114c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001150:	20000360 	.word	0x20000360

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>
	...

08001158 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_Init+0x3c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <HAL_Init+0x3c>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800116c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f93e 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001174:	2000      	movs	r0, #0
 8001176:	f000 f80f 	bl	8001198 <HAL_InitTick>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	e001      	b.n	800118a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001186:	f7ff fd01 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118a:	79fb      	ldrb	r3, [r7, #7]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a4:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <HAL_InitTick+0x6c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_InitTick+0x70>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <HAL_InitTick+0x6c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f949 	bl	800145a <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10f      	bne.n	80011ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d809      	bhi.n	80011e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f913 	bl	8001406 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <HAL_InitTick+0x74>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e007      	b.n	80011f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e004      	b.n	80011f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e001      	b.n	80011f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	20000214 	.word	0x20000214

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000214 	.word	0x20000214

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	@ (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff3e 	bl	8001298 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff31 	bl	80012b4 <__NVIC_EnableIRQ>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffa2 	bl	80013ac <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	e17f      	b.n	8001784 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8171 	beq.w	800177e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d005      	beq.n	80014b4 <HAL_GPIO_Init+0x40>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d130      	bne.n	8001516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	68da      	ldr	r2, [r3, #12]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ea:	2201      	movs	r2, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	091b      	lsrs	r3, r3, #4
 8001500:	f003 0201 	and.w	r2, r3, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b03      	cmp	r3, #3
 8001520:	d118      	bne.n	8001554 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001528:	2201      	movs	r2, #1
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	f003 0201 	and.w	r2, r3, #1
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b03      	cmp	r3, #3
 800155e:	d017      	beq.n	8001590 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d123      	bne.n	80015e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	6939      	ldr	r1, [r7, #16]
 80015e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0203 	and.w	r2, r3, #3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80ac 	beq.w	800177e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b5f      	ldr	r3, [pc, #380]	@ (80017a4 <HAL_GPIO_Init+0x330>)
 8001628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162a:	4a5e      	ldr	r2, [pc, #376]	@ (80017a4 <HAL_GPIO_Init+0x330>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6613      	str	r3, [r2, #96]	@ 0x60
 8001632:	4b5c      	ldr	r3, [pc, #368]	@ (80017a4 <HAL_GPIO_Init+0x330>)
 8001634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800163e:	4a5a      	ldr	r2, [pc, #360]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	220f      	movs	r2, #15
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001668:	d025      	beq.n	80016b6 <HAL_GPIO_Init+0x242>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4f      	ldr	r2, [pc, #316]	@ (80017ac <HAL_GPIO_Init+0x338>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01f      	beq.n	80016b2 <HAL_GPIO_Init+0x23e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4e      	ldr	r2, [pc, #312]	@ (80017b0 <HAL_GPIO_Init+0x33c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d019      	beq.n	80016ae <HAL_GPIO_Init+0x23a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4d      	ldr	r2, [pc, #308]	@ (80017b4 <HAL_GPIO_Init+0x340>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d013      	beq.n	80016aa <HAL_GPIO_Init+0x236>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <HAL_GPIO_Init+0x344>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d00d      	beq.n	80016a6 <HAL_GPIO_Init+0x232>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4b      	ldr	r2, [pc, #300]	@ (80017bc <HAL_GPIO_Init+0x348>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d007      	beq.n	80016a2 <HAL_GPIO_Init+0x22e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4a      	ldr	r2, [pc, #296]	@ (80017c0 <HAL_GPIO_Init+0x34c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_GPIO_Init+0x22a>
 800169a:	2306      	movs	r3, #6
 800169c:	e00c      	b.n	80016b8 <HAL_GPIO_Init+0x244>
 800169e:	2307      	movs	r3, #7
 80016a0:	e00a      	b.n	80016b8 <HAL_GPIO_Init+0x244>
 80016a2:	2305      	movs	r3, #5
 80016a4:	e008      	b.n	80016b8 <HAL_GPIO_Init+0x244>
 80016a6:	2304      	movs	r3, #4
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x244>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x244>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x244>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x244>
 80016b6:	2300      	movs	r3, #0
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	f002 0203 	and.w	r2, r2, #3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c8:	4937      	ldr	r1, [pc, #220]	@ (80017a8 <HAL_GPIO_Init+0x334>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016fa:	4a32      	ldr	r2, [pc, #200]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001724:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800174e:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001778:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <HAL_GPIO_Init+0x350>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	f47f ae78 	bne.w	8001484 <HAL_GPIO_Init+0x10>
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010000 	.word	0x40010000
 80017ac:	48000400 	.word	0x48000400
 80017b0:	48000800 	.word	0x48000800
 80017b4:	48000c00 	.word	0x48000c00
 80017b8:	48001000 	.word	0x48001000
 80017bc:	48001400 	.word	0x48001400
 80017c0:	48001800 	.word	0x48001800
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e6:	887a      	ldrh	r2, [r7, #2]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_PWREx_GetVoltageRange+0x18>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40007000 	.word	0x40007000

08001814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001822:	d130      	bne.n	8001886 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800182c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001830:	d038      	beq.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001832:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800183a:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800183c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001840:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2232      	movs	r2, #50	@ 0x32
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001858:	e002      	b.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3b01      	subs	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800186c:	d102      	bne.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x60>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f2      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800187c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001880:	d110      	bne.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e00f      	b.n	80018a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001892:	d007      	beq.n	80018a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001894:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800189c:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40007000 	.word	0x40007000
 80018b8:	20000000 	.word	0x20000000
 80018bc:	431bde83 	.word	0x431bde83

080018c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e3ca      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d2:	4b97      	ldr	r3, [pc, #604]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018dc:	4b94      	ldr	r3, [pc, #592]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80e4 	beq.w	8001abc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_RCC_OscConfig+0x4a>
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	f040 808b 	bne.w	8001a18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2b01      	cmp	r3, #1
 8001906:	f040 8087 	bne.w	8001a18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800190a:	4b89      	ldr	r3, [pc, #548]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x62>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e3a2      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1a      	ldr	r2, [r3, #32]
 8001926:	4b82      	ldr	r3, [pc, #520]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d004      	beq.n	800193c <HAL_RCC_OscConfig+0x7c>
 8001932:	4b7f      	ldr	r3, [pc, #508]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800193a:	e005      	b.n	8001948 <HAL_RCC_OscConfig+0x88>
 800193c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001948:	4293      	cmp	r3, r2
 800194a:	d223      	bcs.n	8001994 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fd55 	bl	8002400 <RCC_SetFlashLatencyFromMSIRange>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e383      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001960:	4b73      	ldr	r3, [pc, #460]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a72      	ldr	r2, [pc, #456]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	4b70      	ldr	r3, [pc, #448]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	496d      	ldr	r1, [pc, #436]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	4968      	ldr	r1, [pc, #416]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
 8001992:	e025      	b.n	80019e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001994:	4b66      	ldr	r3, [pc, #408]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a65      	ldr	r2, [pc, #404]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b63      	ldr	r3, [pc, #396]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4960      	ldr	r1, [pc, #384]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	495b      	ldr	r1, [pc, #364]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fd15 	bl	8002400 <RCC_SetFlashLatencyFromMSIRange>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e343      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019e0:	f000 fc4a 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b52      	ldr	r3, [pc, #328]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	4950      	ldr	r1, [pc, #320]	@ (8001b34 <HAL_RCC_OscConfig+0x274>)
 80019f2:	5ccb      	ldrb	r3, [r1, r3]
 80019f4:	f003 031f 	and.w	r3, r3, #31
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001b38 <HAL_RCC_OscConfig+0x278>)
 80019fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a00:	4b4e      	ldr	r3, [pc, #312]	@ (8001b3c <HAL_RCC_OscConfig+0x27c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fbc7 	bl	8001198 <HAL_InitTick>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d052      	beq.n	8001aba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	e327      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d032      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a20:	4b43      	ldr	r3, [pc, #268]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a42      	ldr	r2, [pc, #264]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc04 	bl	8001238 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a34:	f7ff fc00 	bl	8001238 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e310      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a46:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a52:	4b37      	ldr	r3, [pc, #220]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a36      	ldr	r2, [pc, #216]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4931      	ldr	r1, [pc, #196]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a70:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	492c      	ldr	r1, [pc, #176]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	e01a      	b.n	8001abc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a86:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a29      	ldr	r2, [pc, #164]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fbd1 	bl	8001238 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fbcd 	bl	8001238 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e2dd      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aac:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x1da>
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d074      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x21a>
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b0c      	cmp	r3, #12
 8001ad2:	d10e      	bne.n	8001af2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d10b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d064      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d160      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e2ba      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x24a>
 8001afc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0b      	ldr	r2, [pc, #44]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e026      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b12:	d115      	bne.n	8001b40 <HAL_RCC_OscConfig+0x280>
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a02      	ldr	r2, [pc, #8]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e014      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08005f18 	.word	0x08005f18
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004
 8001b40:	4ba0      	ldr	r3, [pc, #640]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a9f      	ldr	r2, [pc, #636]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b9d      	ldr	r3, [pc, #628]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a9c      	ldr	r2, [pc, #624]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fb6a 	bl	8001238 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fb66 	bl	8001238 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	@ 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e276      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7a:	4b92      	ldr	r3, [pc, #584]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x2a8>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff fb56 	bl	8001238 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fb52 	bl	8001238 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e262      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba2:	4b88      	ldr	r3, [pc, #544]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x2d0>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d060      	beq.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x310>
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d119      	bne.n	8001bfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d116      	bne.n	8001bfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd0:	4b7c      	ldr	r3, [pc, #496]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_OscConfig+0x328>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e23f      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b76      	ldr	r3, [pc, #472]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	4973      	ldr	r1, [pc, #460]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfc:	e040      	b.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d023      	beq.n	8001c4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c06:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb11 	bl	8001238 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb0d 	bl	8001238 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e21d      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	4b65      	ldr	r3, [pc, #404]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b62      	ldr	r3, [pc, #392]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	495f      	ldr	r1, [pc, #380]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
 8001c4c:	e018      	b.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff faed 	bl	8001238 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff fae9 	bl	8001238 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1f9      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c74:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01c      	beq.n	8001cce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c94:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fac8 	bl	8001238 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff fac4 	bl	8001238 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1d4      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cbe:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ef      	beq.n	8001cac <HAL_RCC_OscConfig+0x3ec>
 8001ccc:	e01b      	b.n	8001d06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cce:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff faab 	bl	8001238 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce6:	f7ff faa7 	bl	8001238 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1b7      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf8:	4b32      	ldr	r3, [pc, #200]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ef      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a6 	beq.w	8001e60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d18:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10d      	bne.n	8001d40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b27      	ldr	r3, [pc, #156]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a26      	ldr	r2, [pc, #152]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_RCC_OscConfig+0x508>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d118      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <HAL_RCC_OscConfig+0x508>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_RCC_OscConfig+0x508>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fa6e 	bl	8001238 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d60:	f7ff fa6a 	bl	8001238 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e17a      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <HAL_RCC_OscConfig+0x508>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
 8001d86:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d96:	e029      	b.n	8001dec <HAL_RCC_OscConfig+0x52c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d115      	bne.n	8001dcc <HAL_RCC_OscConfig+0x50c>
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da6:	4a07      	ldr	r2, [pc, #28]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001db0:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db6:	4a03      	ldr	r2, [pc, #12]	@ (8001dc4 <HAL_RCC_OscConfig+0x504>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dc0:	e014      	b.n	8001dec <HAL_RCC_OscConfig+0x52c>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	4b9c      	ldr	r3, [pc, #624]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd2:	4a9b      	ldr	r2, [pc, #620]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ddc:	4b98      	ldr	r3, [pc, #608]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de2:	4a97      	ldr	r2, [pc, #604]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d016      	beq.n	8001e22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff fa20 	bl	8001238 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fa1c 	bl	8001238 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e12a      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	4b8b      	ldr	r3, [pc, #556]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ed      	beq.n	8001dfc <HAL_RCC_OscConfig+0x53c>
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff fa09 	bl	8001238 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fa05 	bl	8001238 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e113      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	4b7f      	ldr	r3, [pc, #508]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ed      	bne.n	8001e2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b7a      	ldr	r3, [pc, #488]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	4a79      	ldr	r2, [pc, #484]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80fe 	beq.w	8002066 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 80d0 	bne.w	8002014 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e74:	4b72      	ldr	r3, [pc, #456]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d130      	bne.n	8001eea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	3b01      	subs	r3, #1
 8001e94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d127      	bne.n	8001eea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d11f      	bne.n	8001eea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001eb4:	2a07      	cmp	r2, #7
 8001eb6:	bf14      	ite	ne
 8001eb8:	2201      	movne	r2, #1
 8001eba:	2200      	moveq	r2, #0
 8001ebc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d113      	bne.n	8001eea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d06e      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d069      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ef0:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001efc:	4b50      	ldr	r3, [pc, #320]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0ad      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f18:	f7ff f98e 	bl	8001238 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff f98a 	bl	8001238 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e09a      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f32:	4b43      	ldr	r3, [pc, #268]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f3e:	4b40      	ldr	r3, [pc, #256]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	4b40      	ldr	r3, [pc, #256]	@ (8002044 <HAL_RCC_OscConfig+0x784>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f4e:	3a01      	subs	r2, #1
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f58:	0212      	lsls	r2, r2, #8
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f60:	0852      	lsrs	r2, r2, #1
 8001f62:	3a01      	subs	r2, #1
 8001f64:	0552      	lsls	r2, r2, #21
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f6c:	0852      	lsrs	r2, r2, #1
 8001f6e:	3a01      	subs	r2, #1
 8001f70:	0652      	lsls	r2, r2, #25
 8001f72:	4311      	orrs	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f78:	0912      	lsrs	r2, r2, #4
 8001f7a:	0452      	lsls	r2, r2, #17
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	4930      	ldr	r1, [pc, #192]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f84:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2d      	ldr	r2, [pc, #180]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f9c:	f7ff f94c 	bl	8001238 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff f948 	bl	8001238 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e058      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc2:	e050      	b.n	8002066 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e04f      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d148      	bne.n	8002066 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fec:	f7ff f924 	bl	8001238 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7ff f920 	bl	8001238 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e030      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x734>
 8002012:	e028      	b.n	8002066 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d023      	beq.n	8002062 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a08      	ldr	r2, [pc, #32]	@ (8002040 <HAL_RCC_OscConfig+0x780>)
 8002020:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff f907 	bl	8001238 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202c:	e00c      	b.n	8002048 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff f903 	bl	8001238 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d905      	bls.n	8002048 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e013      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
 8002040:	40021000 	.word	0x40021000
 8002044:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <HAL_RCC_OscConfig+0x7b0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ec      	bne.n	800202e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_RCC_OscConfig+0x7b0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4905      	ldr	r1, [pc, #20]	@ (8002070 <HAL_RCC_OscConfig+0x7b0>)
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_RCC_OscConfig+0x7b4>)
 800205c:	4013      	ands	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e001      	b.n	8002066 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	feeefffc 	.word	0xfeeefffc

08002078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0e7      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b75      	ldr	r3, [pc, #468]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d910      	bls.n	80020bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b72      	ldr	r3, [pc, #456]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4970      	ldr	r1, [pc, #448]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0cf      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b66      	ldr	r3, [pc, #408]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d908      	bls.n	80020ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b63      	ldr	r3, [pc, #396]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4960      	ldr	r1, [pc, #384]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d04c      	beq.n	8002190 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d121      	bne.n	800214e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0a6      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002116:	4b54      	ldr	r3, [pc, #336]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e09a      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800212e:	4b4e      	ldr	r3, [pc, #312]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e08e      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800213e:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e086      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800214e:	4b46      	ldr	r3, [pc, #280]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 0203 	bic.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4943      	ldr	r1, [pc, #268]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002160:	f7ff f86a 	bl	8001238 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7ff f866 	bl	8001238 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e06e      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b3a      	ldr	r3, [pc, #232]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 020c 	and.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1eb      	bne.n	8002168 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d010      	beq.n	80021be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d208      	bcs.n	80021be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	492b      	ldr	r1, [pc, #172]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021be:	4b29      	ldr	r3, [pc, #164]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d210      	bcs.n	80021ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021cc:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 0207 	bic.w	r2, r3, #7
 80021d4:	4923      	ldr	r1, [pc, #140]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_RCC_ClockConfig+0x1ec>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e036      	b.n	800225c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d008      	beq.n	800220c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	4918      	ldr	r1, [pc, #96]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d009      	beq.n	800222c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002218:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4910      	ldr	r1, [pc, #64]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800222c:	f000 f824 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	490b      	ldr	r1, [pc, #44]	@ (800226c <HAL_RCC_ClockConfig+0x1f4>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
 8002248:	4a09      	ldr	r2, [pc, #36]	@ (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800224a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_RCC_ClockConfig+0x1fc>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe ffa1 	bl	8001198 <HAL_InitTick>
 8002256:	4603      	mov	r3, r0
 8002258:	72fb      	strb	r3, [r7, #11]

  return status;
 800225a:	7afb      	ldrb	r3, [r7, #11]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40022000 	.word	0x40022000
 8002268:	40021000 	.word	0x40021000
 800226c:	08005f18 	.word	0x08005f18
 8002270:	20000000 	.word	0x20000000
 8002274:	20000004 	.word	0x20000004

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002286:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002290:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x34>
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d121      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d11e      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022ac:	4b34      	ldr	r3, [pc, #208]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022b8:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	e005      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10d      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d102      	bne.n	80022f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x110>)
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e004      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <HAL_RCC_GetSysClockFreq+0x114>)
 80022fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d134      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002306:	4b1e      	ldr	r3, [pc, #120]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d003      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0xa6>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d003      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0xac>
 800231c:	e005      	b.n	800232a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x110>)
 8002320:	617b      	str	r3, [r7, #20]
      break;
 8002322:	e005      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_RCC_GetSysClockFreq+0x114>)
 8002326:	617b      	str	r3, [r7, #20]
      break;
 8002328:	e002      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	617b      	str	r3, [r7, #20]
      break;
 800232e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002330:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	3301      	adds	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	fb03 f202 	mul.w	r2, r3, r2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x108>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	0e5b      	lsrs	r3, r3, #25
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	3301      	adds	r3, #1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002370:	69bb      	ldr	r3, [r7, #24]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	@ 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	08005f30 	.word	0x08005f30
 8002388:	00f42400 	.word	0x00f42400
 800238c:	007a1200 	.word	0x007a1200

08002390 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000000 	.word	0x20000000

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023ac:	f7ff fff0 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4904      	ldr	r1, [pc, #16]	@ (80023d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40021000 	.word	0x40021000
 80023d0:	08005f28 	.word	0x08005f28

080023d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023d8:	f7ff ffda 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0adb      	lsrs	r3, r3, #11
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4904      	ldr	r1, [pc, #16]	@ (80023fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	08005f28 	.word	0x08005f28

08002400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800240c:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f9ee 	bl	80017f8 <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
 800241e:	e014      	b.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b25      	ldr	r3, [pc, #148]	@ (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002424:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242a:	6593      	str	r3, [r2, #88]	@ 0x58
 800242c:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002438:	f7ff f9de 	bl	80017f8 <HAL_PWREx_GetVoltageRange>
 800243c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800243e:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	4a1d      	ldr	r2, [pc, #116]	@ (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002448:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002450:	d10b      	bne.n	800246a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b80      	cmp	r3, #128	@ 0x80
 8002456:	d919      	bls.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2ba0      	cmp	r3, #160	@ 0xa0
 800245c:	d902      	bls.n	8002464 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245e:	2302      	movs	r3, #2
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	e013      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002464:	2301      	movs	r3, #1
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	e010      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b80      	cmp	r3, #128	@ 0x80
 800246e:	d902      	bls.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002470:	2303      	movs	r3, #3
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	e00a      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b80      	cmp	r3, #128	@ 0x80
 800247a:	d102      	bne.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e004      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b70      	cmp	r3, #112	@ 0x70
 8002486:	d101      	bne.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002488:	2301      	movs	r3, #1
 800248a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800248c:	4b0b      	ldr	r3, [pc, #44]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 0207 	bic.w	r2, r3, #7
 8002494:	4909      	ldr	r1, [pc, #36]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800249c:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024c8:	2300      	movs	r3, #0
 80024ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d041      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024e0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024e4:	d02a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024e6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024ea:	d824      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024f0:	d008      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024f6:	d81e      	bhi.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002500:	d010      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002502:	e018      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002504:	4b86      	ldr	r3, [pc, #536]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4a85      	ldr	r2, [pc, #532]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800250e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002510:	e015      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fabb 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002522:	e00c      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3320      	adds	r3, #32
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fba6 	bl	8002c7c <RCCEx_PLLSAI2_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002534:	e003      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	74fb      	strb	r3, [r7, #19]
      break;
 800253a:	e000      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800253c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002544:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800254a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002552:	4973      	ldr	r1, [pc, #460]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800255a:	e001      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d041      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002570:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002574:	d02a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002576:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800257a:	d824      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800257c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002586:	d81e      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00a      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002590:	d010      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002592:	e018      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002594:	4b62      	ldr	r3, [pc, #392]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a61      	ldr	r2, [pc, #388]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a0:	e015      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fa73 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b2:	e00c      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3320      	adds	r3, #32
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fb5e 	bl	8002c7c <RCCEx_PLLSAI2_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c4:	e003      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ca:	e000      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025d4:	4b52      	ldr	r3, [pc, #328]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025e2:	494f      	ldr	r1, [pc, #316]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025ea:	e001      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a0 	beq.w	800273e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002602:	4b47      	ldr	r3, [pc, #284]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	4a40      	ldr	r2, [pc, #256]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	@ 0x58
 8002624:	4b3e      	ldr	r3, [pc, #248]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002630:	2301      	movs	r3, #1
 8002632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b3b      	ldr	r3, [pc, #236]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3a      	ldr	r2, [pc, #232]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002640:	f7fe fdfa 	bl	8001238 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002646:	e009      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7fe fdf6 	bl	8001238 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	74fb      	strb	r3, [r7, #19]
        break;
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800265c:	4b31      	ldr	r3, [pc, #196]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d15c      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800266e:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01f      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	d019      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002698:	4b21      	ldr	r3, [pc, #132]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	4a20      	ldr	r2, [pc, #128]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026b8:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d016      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fdb5 	bl	8001238 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d0:	e00b      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fdb1 	bl	8001238 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d902      	bls.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	74fb      	strb	r3, [r7, #19]
            break;
 80026e8:	e006      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ec      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fe:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800270e:	4904      	ldr	r1, [pc, #16]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002716:	e009      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
 800271c:	e006      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272c:	7c7b      	ldrb	r3, [r7, #17]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b9e      	ldr	r3, [pc, #632]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	4a9d      	ldr	r2, [pc, #628]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800273c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274a:	4b98      	ldr	r3, [pc, #608]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002750:	f023 0203 	bic.w	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002758:	4994      	ldr	r1, [pc, #592]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800276c:	4b8f      	ldr	r3, [pc, #572]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	f023 020c 	bic.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277a:	498c      	ldr	r1, [pc, #560]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278e:	4b87      	ldr	r3, [pc, #540]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002794:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279c:	4983      	ldr	r1, [pc, #524]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027b0:	4b7e      	ldr	r3, [pc, #504]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	497b      	ldr	r1, [pc, #492]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027d2:	4b76      	ldr	r3, [pc, #472]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e0:	4972      	ldr	r1, [pc, #456]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f4:	4b6d      	ldr	r3, [pc, #436]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	496a      	ldr	r1, [pc, #424]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002816:	4b65      	ldr	r3, [pc, #404]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	4961      	ldr	r1, [pc, #388]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002838:	4b5c      	ldr	r3, [pc, #368]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002846:	4959      	ldr	r1, [pc, #356]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800285a:	4b54      	ldr	r3, [pc, #336]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002860:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002868:	4950      	ldr	r1, [pc, #320]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800287c:	4b4b      	ldr	r3, [pc, #300]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	4948      	ldr	r1, [pc, #288]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800289e:	4b43      	ldr	r3, [pc, #268]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	493f      	ldr	r1, [pc, #252]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d028      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c0:	4b3a      	ldr	r3, [pc, #232]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ce:	4937      	ldr	r1, [pc, #220]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028de:	d106      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b32      	ldr	r3, [pc, #200]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a31      	ldr	r2, [pc, #196]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	e011      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028f6:	d10c      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f8c8 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d028      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800291e:	4b23      	ldr	r3, [pc, #140]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002924:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292c:	491f      	ldr	r1, [pc, #124]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002938:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800293c:	d106      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002948:	60d3      	str	r3, [r2, #12]
 800294a:	e011      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002954:	d10c      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	2101      	movs	r1, #1
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f899 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 8002962:	4603      	mov	r3, r0
 8002964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d02b      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298a:	4908      	ldr	r1, [pc, #32]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800299a:	d109      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a02      	ldr	r2, [pc, #8]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a6:	60d3      	str	r3, [r2, #12]
 80029a8:	e014      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f867 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d02f      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ee:	4928      	ldr	r1, [pc, #160]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029fe:	d10d      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f844 	bl	8002a94 <RCCEx_PLLSAI1_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d014      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	74bb      	strb	r3, [r7, #18]
 8002a1a:	e011      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3320      	adds	r3, #32
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 f925 	bl	8002c7c <RCCEx_PLLSAI2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a4c:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a5a:	490d      	ldr	r1, [pc, #52]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a7e:	4904      	ldr	r1, [pc, #16]	@ (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a86:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000

08002a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aa2:	4b75      	ldr	r3, [pc, #468]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d018      	beq.n	8002ae0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aae:	4b72      	ldr	r3, [pc, #456]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0203 	and.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d10d      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ac6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d047      	beq.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e044      	b.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d018      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0x86>
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d825      	bhi.n	8002b38 <RCCEx_PLLSAI1_Config+0xa4>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d002      	beq.n	8002af6 <RCCEx_PLLSAI1_Config+0x62>
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d009      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x74>
 8002af4:	e020      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002af6:	4b60      	ldr	r3, [pc, #384]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11d      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e01a      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b08:	4b5b      	ldr	r3, [pc, #364]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e013      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b1a:	4b57      	ldr	r3, [pc, #348]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b26:	4b54      	ldr	r3, [pc, #336]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b36:	e006      	b.n	8002b46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e004      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6819      	ldr	r1, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	430b      	orrs	r3, r1
 8002b64:	4944      	ldr	r1, [pc, #272]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d17d      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b70:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fb5c 	bl	8001238 <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b82:	e009      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b84:	f7fe fb58 	bl	8001238 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d902      	bls.n	8002b98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	73fb      	strb	r3, [r7, #15]
        break;
 8002b96:	e005      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b98:	4b37      	ldr	r3, [pc, #220]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ef      	bne.n	8002b84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d160      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d111      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb0:	4b31      	ldr	r3, [pc, #196]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6892      	ldr	r2, [r2, #8]
 8002bc0:	0211      	lsls	r1, r2, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	0912      	lsrs	r2, r2, #4
 8002bc8:	0452      	lsls	r2, r2, #17
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	492a      	ldr	r1, [pc, #168]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	610b      	str	r3, [r1, #16]
 8002bd2:	e027      	b.n	8002c24 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d112      	bne.n	8002c00 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bda:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002be2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6892      	ldr	r2, [r2, #8]
 8002bea:	0211      	lsls	r1, r2, #8
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6912      	ldr	r2, [r2, #16]
 8002bf0:	0852      	lsrs	r2, r2, #1
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	0552      	lsls	r2, r2, #21
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	491f      	ldr	r1, [pc, #124]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	610b      	str	r3, [r1, #16]
 8002bfe:	e011      	b.n	8002c24 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c00:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6892      	ldr	r2, [r2, #8]
 8002c10:	0211      	lsls	r1, r2, #8
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6952      	ldr	r2, [r2, #20]
 8002c16:	0852      	lsrs	r2, r2, #1
 8002c18:	3a01      	subs	r2, #1
 8002c1a:	0652      	lsls	r2, r2, #25
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	4916      	ldr	r1, [pc, #88]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c24:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a13      	ldr	r2, [pc, #76]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c30:	f7fe fb02 	bl	8001238 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c36:	e009      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c38:	f7fe fafe 	bl	8001238 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d902      	bls.n	8002c4c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	73fb      	strb	r3, [r7, #15]
          break;
 8002c4a:	e005      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0ef      	beq.n	8002c38 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	4904      	ldr	r1, [pc, #16]	@ (8002c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000

08002c7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d018      	beq.n	8002cc8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c96:	4b67      	ldr	r3, [pc, #412]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0203 	and.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d10d      	bne.n	8002cc2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002cae:	4b61      	ldr	r3, [pc, #388]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d047      	beq.n	8002d52 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
 8002cc6:	e044      	b.n	8002d52 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d018      	beq.n	8002d02 <RCCEx_PLLSAI2_Config+0x86>
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d825      	bhi.n	8002d20 <RCCEx_PLLSAI2_Config+0xa4>
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d002      	beq.n	8002cde <RCCEx_PLLSAI2_Config+0x62>
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d009      	beq.n	8002cf0 <RCCEx_PLLSAI2_Config+0x74>
 8002cdc:	e020      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cde:	4b55      	ldr	r3, [pc, #340]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11d      	bne.n	8002d26 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cee:	e01a      	b.n	8002d26 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cf0:	4b50      	ldr	r3, [pc, #320]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e013      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d02:	4b4c      	ldr	r3, [pc, #304]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10f      	bne.n	8002d2e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d0e:	4b49      	ldr	r3, [pc, #292]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d1e:	e006      	b.n	8002d2e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
      break;
 8002d24:	e004      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d26:	bf00      	nop
 8002d28:	e002      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d36:	4b3f      	ldr	r3, [pc, #252]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6819      	ldr	r1, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	4939      	ldr	r1, [pc, #228]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d167      	bne.n	8002e28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d58:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a35      	ldr	r2, [pc, #212]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7fe fa68 	bl	8001238 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d6a:	e009      	b.n	8002d80 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d6c:	f7fe fa64 	bl	8001238 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d902      	bls.n	8002d80 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d7e:	e005      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d80:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ef      	bne.n	8002d6c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d14a      	bne.n	8002e28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d111      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d98:	4b26      	ldr	r3, [pc, #152]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	0211      	lsls	r1, r2, #8
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	0912      	lsrs	r2, r2, #4
 8002db0:	0452      	lsls	r2, r2, #17
 8002db2:	430a      	orrs	r2, r1
 8002db4:	491f      	ldr	r1, [pc, #124]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	614b      	str	r3, [r1, #20]
 8002dba:	e011      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dc4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6892      	ldr	r2, [r2, #8]
 8002dcc:	0211      	lsls	r1, r2, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6912      	ldr	r2, [r2, #16]
 8002dd2:	0852      	lsrs	r2, r2, #1
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	0652      	lsls	r2, r2, #25
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	4916      	ldr	r1, [pc, #88]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002de0:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe fa24 	bl	8001238 <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df2:	e009      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df4:	f7fe fa20 	bl	8001238 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d902      	bls.n	8002e08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	73fb      	strb	r3, [r7, #15]
          break;
 8002e06:	e005      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e08:	4b0a      	ldr	r3, [pc, #40]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ef      	beq.n	8002df4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4904      	ldr	r1, [pc, #16]	@ (8002e34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e049      	b.n	8002ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe f82e 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fed4 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d001      	beq.n	8002f00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e047      	b.n	8002f90 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <HAL_TIM_Base_Start+0xb4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01d      	beq.n	8002f4e <HAL_TIM_Base_Start+0x66>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1a:	d018      	beq.n	8002f4e <HAL_TIM_Base_Start+0x66>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa0 <HAL_TIM_Base_Start+0xb8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d013      	beq.n	8002f4e <HAL_TIM_Base_Start+0x66>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa4 <HAL_TIM_Base_Start+0xbc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00e      	beq.n	8002f4e <HAL_TIM_Base_Start+0x66>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <HAL_TIM_Base_Start+0xc0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d009      	beq.n	8002f4e <HAL_TIM_Base_Start+0x66>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fac <HAL_TIM_Base_Start+0xc4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d004      	beq.n	8002f4e <HAL_TIM_Base_Start+0x66>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <HAL_TIM_Base_Start+0xc8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d115      	bne.n	8002f7a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <HAL_TIM_Base_Start+0xcc>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d015      	beq.n	8002f8c <HAL_TIM_Base_Start+0xa4>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f66:	d011      	beq.n	8002f8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f78:	e008      	b.n	8002f8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e000      	b.n	8002f8e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40000c00 	.word	0x40000c00
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	00010007 	.word	0x00010007

08002fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e049      	b.n	800305e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f841 	bl	8003066 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f000 fe14 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <HAL_TIM_PWM_Start+0x24>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e03c      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d109      	bne.n	80030ba <HAL_TIM_PWM_Start+0x3e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	e02f      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d109      	bne.n	80030d4 <HAL_TIM_PWM_Start+0x58>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e022      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d109      	bne.n	80030ee <HAL_TIM_PWM_Start+0x72>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	e015      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d109      	bne.n	8003108 <HAL_TIM_PWM_Start+0x8c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e008      	b.n	800311a <HAL_TIM_PWM_Start+0x9e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b01      	cmp	r3, #1
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e09c      	b.n	800325c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_TIM_PWM_Start+0xb6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003130:	e023      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d104      	bne.n	8003142 <HAL_TIM_PWM_Start+0xc6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003140:	e01b      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d104      	bne.n	8003152 <HAL_TIM_PWM_Start+0xd6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003150:	e013      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b0c      	cmp	r3, #12
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0xe6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003160:	e00b      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b10      	cmp	r3, #16
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xf6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003170:	e003      	b.n	800317a <HAL_TIM_PWM_Start+0xfe>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2201      	movs	r2, #1
 8003180:	6839      	ldr	r1, [r7, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f001 fb01 	bl	800478a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a35      	ldr	r2, [pc, #212]	@ (8003264 <HAL_TIM_PWM_Start+0x1e8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a34      	ldr	r2, [pc, #208]	@ (8003268 <HAL_TIM_PWM_Start+0x1ec>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a32      	ldr	r2, [pc, #200]	@ (800326c <HAL_TIM_PWM_Start+0x1f0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a31      	ldr	r2, [pc, #196]	@ (8003270 <HAL_TIM_PWM_Start+0x1f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_TIM_PWM_Start+0x13e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003274 <HAL_TIM_PWM_Start+0x1f8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d101      	bne.n	80031be <HAL_TIM_PWM_Start+0x142>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_TIM_PWM_Start+0x144>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <HAL_TIM_PWM_Start+0x1e8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e6:	d018      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a22      	ldr	r2, [pc, #136]	@ (8003278 <HAL_TIM_PWM_Start+0x1fc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a21      	ldr	r2, [pc, #132]	@ (800327c <HAL_TIM_PWM_Start+0x200>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1f      	ldr	r2, [pc, #124]	@ (8003280 <HAL_TIM_PWM_Start+0x204>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a17      	ldr	r2, [pc, #92]	@ (8003268 <HAL_TIM_PWM_Start+0x1ec>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIM_PWM_Start+0x19e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	@ (800326c <HAL_TIM_PWM_Start+0x1f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d115      	bne.n	8003246 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <HAL_TIM_PWM_Start+0x208>)
 8003222:	4013      	ands	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b06      	cmp	r3, #6
 800322a:	d015      	beq.n	8003258 <HAL_TIM_PWM_Start+0x1dc>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003232:	d011      	beq.n	8003258 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	e008      	b.n	8003258 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e000      	b.n	800325a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40012c00 	.word	0x40012c00
 8003268:	40013400 	.word	0x40013400
 800326c:	40014000 	.word	0x40014000
 8003270:	40014400 	.word	0x40014400
 8003274:	40014800 	.word	0x40014800
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	00010007 	.word	0x00010007

08003288 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e049      	b.n	800332e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f841 	bl	8003336 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f000 fcac 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <HAL_TIM_IC_Start+0x1a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003362:	b2db      	uxtb	r3, r3
 8003364:	e023      	b.n	80033ae <HAL_TIM_IC_Start+0x62>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d104      	bne.n	8003376 <HAL_TIM_IC_Start+0x2a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e01b      	b.n	80033ae <HAL_TIM_IC_Start+0x62>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d104      	bne.n	8003386 <HAL_TIM_IC_Start+0x3a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e013      	b.n	80033ae <HAL_TIM_IC_Start+0x62>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d104      	bne.n	8003396 <HAL_TIM_IC_Start+0x4a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <HAL_TIM_IC_Start+0x62>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b10      	cmp	r3, #16
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_IC_Start+0x5a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	e003      	b.n	80033ae <HAL_TIM_IC_Start+0x62>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <HAL_TIM_IC_Start+0x74>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e013      	b.n	80033e8 <HAL_TIM_IC_Start+0x9c>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d104      	bne.n	80033d0 <HAL_TIM_IC_Start+0x84>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e00b      	b.n	80033e8 <HAL_TIM_IC_Start+0x9c>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d104      	bne.n	80033e0 <HAL_TIM_IC_Start+0x94>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e003      	b.n	80033e8 <HAL_TIM_IC_Start+0x9c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d102      	bne.n	80033f6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80033f0:	7bbb      	ldrb	r3, [r7, #14]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e092      	b.n	8003520 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <HAL_TIM_IC_Start+0xbe>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003408:	e023      	b.n	8003452 <HAL_TIM_IC_Start+0x106>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d104      	bne.n	800341a <HAL_TIM_IC_Start+0xce>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003418:	e01b      	b.n	8003452 <HAL_TIM_IC_Start+0x106>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d104      	bne.n	800342a <HAL_TIM_IC_Start+0xde>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003428:	e013      	b.n	8003452 <HAL_TIM_IC_Start+0x106>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	d104      	bne.n	800343a <HAL_TIM_IC_Start+0xee>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003438:	e00b      	b.n	8003452 <HAL_TIM_IC_Start+0x106>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d104      	bne.n	800344a <HAL_TIM_IC_Start+0xfe>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003448:	e003      	b.n	8003452 <HAL_TIM_IC_Start+0x106>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <HAL_TIM_IC_Start+0x116>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003460:	e013      	b.n	800348a <HAL_TIM_IC_Start+0x13e>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d104      	bne.n	8003472 <HAL_TIM_IC_Start+0x126>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003470:	e00b      	b.n	800348a <HAL_TIM_IC_Start+0x13e>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b08      	cmp	r3, #8
 8003476:	d104      	bne.n	8003482 <HAL_TIM_IC_Start+0x136>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003480:	e003      	b.n	800348a <HAL_TIM_IC_Start+0x13e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2201      	movs	r2, #1
 8003490:	6839      	ldr	r1, [r7, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f001 f979 	bl	800478a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a22      	ldr	r2, [pc, #136]	@ (8003528 <HAL_TIM_IC_Start+0x1dc>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_TIM_IC_Start+0x192>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034aa:	d018      	beq.n	80034de <HAL_TIM_IC_Start+0x192>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_TIM_IC_Start+0x1e0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_TIM_IC_Start+0x192>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <HAL_TIM_IC_Start+0x1e4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIM_IC_Start+0x192>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_TIM_IC_Start+0x1e8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_TIM_IC_Start+0x192>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_TIM_IC_Start+0x1ec>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIM_IC_Start+0x192>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_TIM_IC_Start+0x1f0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d115      	bne.n	800350a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <HAL_TIM_IC_Start+0x1f4>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d015      	beq.n	800351c <HAL_TIM_IC_Start+0x1d0>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f6:	d011      	beq.n	800351c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	e008      	b.n	800351c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e000      	b.n	800351e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40013400 	.word	0x40013400
 800353c:	40014000 	.word	0x40014000
 8003540:	00010007 	.word	0x00010007

08003544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d020      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0202 	mvn.w	r2, #2
 8003578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fb2a 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fb1c 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb2d 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d020      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0204 	mvn.w	r2, #4
 80035c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fb04 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 faf6 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fb07 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d020      	beq.n	8003640 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0208 	mvn.w	r2, #8
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2204      	movs	r2, #4
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fade 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fad0 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fae1 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d020      	beq.n	800368c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2208      	movs	r2, #8
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fab8 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 faaa 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fabb 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0201 	mvn.w	r2, #1
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa88 	bl	8003bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d104      	bne.n	80036c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80036d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f001 f98b 	bl	80049f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00c      	beq.n	8003702 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80036fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f001 f983 	bl	8004a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa75 	bl	8003c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00c      	beq.n	800374a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0220 	mvn.w	r2, #32
 8003742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 f94b 	bl	80049e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIM_IC_ConfigChannel+0x1e>
 800376c:	2302      	movs	r3, #2
 800376e:	e088      	b.n	8003882 <HAL_TIM_IC_ConfigChannel+0x130>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11b      	bne.n	80037b6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800378e:	f000 fe59 	bl	8004444 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 020c 	bic.w	r2, r2, #12
 80037a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6999      	ldr	r1, [r3, #24]
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	619a      	str	r2, [r3, #24]
 80037b4:	e060      	b.n	8003878 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d11c      	bne.n	80037f6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80037cc:	f000 fed7 	bl	800457e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6999      	ldr	r1, [r3, #24]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	619a      	str	r2, [r3, #24]
 80037f4:	e040      	b.n	8003878 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d11b      	bne.n	8003834 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800380c:	f000 ff24 	bl	8004658 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 020c 	bic.w	r2, r2, #12
 800381e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69d9      	ldr	r1, [r3, #28]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	61da      	str	r2, [r3, #28]
 8003832:	e021      	b.n	8003878 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d11c      	bne.n	8003874 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800384a:	f000 ff41 	bl	80046d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800385c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69d9      	ldr	r1, [r3, #28]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	021a      	lsls	r2, r3, #8
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	61da      	str	r2, [r3, #28]
 8003872:	e001      	b.n	8003878 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e0ff      	b.n	8003aaa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b14      	cmp	r3, #20
 80038b6:	f200 80f0 	bhi.w	8003a9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80038ba:	a201      	add	r2, pc, #4	@ (adr r2, 80038c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003a9b 	.word	0x08003a9b
 80038c8:	08003a9b 	.word	0x08003a9b
 80038cc:	08003a9b 	.word	0x08003a9b
 80038d0:	08003955 	.word	0x08003955
 80038d4:	08003a9b 	.word	0x08003a9b
 80038d8:	08003a9b 	.word	0x08003a9b
 80038dc:	08003a9b 	.word	0x08003a9b
 80038e0:	08003997 	.word	0x08003997
 80038e4:	08003a9b 	.word	0x08003a9b
 80038e8:	08003a9b 	.word	0x08003a9b
 80038ec:	08003a9b 	.word	0x08003a9b
 80038f0:	080039d7 	.word	0x080039d7
 80038f4:	08003a9b 	.word	0x08003a9b
 80038f8:	08003a9b 	.word	0x08003a9b
 80038fc:	08003a9b 	.word	0x08003a9b
 8003900:	08003a19 	.word	0x08003a19
 8003904:	08003a9b 	.word	0x08003a9b
 8003908:	08003a9b 	.word	0x08003a9b
 800390c:	08003a9b 	.word	0x08003a9b
 8003910:	08003a59 	.word	0x08003a59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fa28 	bl	8003d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6999      	ldr	r1, [r3, #24]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	619a      	str	r2, [r3, #24]
      break;
 8003952:	e0a5      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fa98 	bl	8003e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800396e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]
      break;
 8003994:	e084      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fb01 	bl	8003fa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0208 	orr.w	r2, r2, #8
 80039b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69da      	ldr	r2, [r3, #28]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0204 	bic.w	r2, r2, #4
 80039c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	61da      	str	r2, [r3, #28]
      break;
 80039d4:	e064      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68b9      	ldr	r1, [r7, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fb69 	bl	80040b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69da      	ldr	r2, [r3, #28]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69d9      	ldr	r1, [r3, #28]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	021a      	lsls	r2, r3, #8
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	61da      	str	r2, [r3, #28]
      break;
 8003a16:	e043      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fbb2 	bl	8004188 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0208 	orr.w	r2, r2, #8
 8003a32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	691a      	ldr	r2, [r3, #16]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a56:	e023      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68b9      	ldr	r1, [r7, #8]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fbf6 	bl	8004250 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a98:	e002      	b.n	8003aa0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop

08003ab4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e031      	b.n	8003b30 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003adc:	6839      	ldr	r1, [r7, #0]
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fc1c 	bl	800431c <TIM_SlaveTimer_SetConfig>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e018      	b.n	8003b30 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b1c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b0c      	cmp	r3, #12
 8003b4a:	d831      	bhi.n	8003bb0 <HAL_TIM_ReadCapturedValue+0x78>
 8003b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b89 	.word	0x08003b89
 8003b58:	08003bb1 	.word	0x08003bb1
 8003b5c:	08003bb1 	.word	0x08003bb1
 8003b60:	08003bb1 	.word	0x08003bb1
 8003b64:	08003b93 	.word	0x08003b93
 8003b68:	08003bb1 	.word	0x08003bb1
 8003b6c:	08003bb1 	.word	0x08003bb1
 8003b70:	08003bb1 	.word	0x08003bb1
 8003b74:	08003b9d 	.word	0x08003b9d
 8003b78:	08003bb1 	.word	0x08003bb1
 8003b7c:	08003bb1 	.word	0x08003bb1
 8003b80:	08003bb1 	.word	0x08003bb1
 8003b84:	08003ba7 	.word	0x08003ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8e:	60fb      	str	r3, [r7, #12]

      break;
 8003b90:	e00f      	b.n	8003bb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	60fb      	str	r3, [r7, #12]

      break;
 8003b9a:	e00a      	b.n	8003bb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba2:	60fb      	str	r3, [r7, #12]

      break;
 8003ba4:	e005      	b.n	8003bb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	60fb      	str	r3, [r7, #12]

      break;
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003bb0:	bf00      	nop
  }

  return tmpreg;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a46      	ldr	r2, [pc, #280]	@ (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c42:	d00f      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a43      	ldr	r2, [pc, #268]	@ (8003d54 <TIM_Base_SetConfig+0x130>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a42      	ldr	r2, [pc, #264]	@ (8003d58 <TIM_Base_SetConfig+0x134>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a41      	ldr	r2, [pc, #260]	@ (8003d5c <TIM_Base_SetConfig+0x138>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a40      	ldr	r2, [pc, #256]	@ (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a35      	ldr	r2, [pc, #212]	@ (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01f      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c84:	d01b      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a32      	ldr	r2, [pc, #200]	@ (8003d54 <TIM_Base_SetConfig+0x130>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d017      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a31      	ldr	r2, [pc, #196]	@ (8003d58 <TIM_Base_SetConfig+0x134>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a30      	ldr	r2, [pc, #192]	@ (8003d5c <TIM_Base_SetConfig+0x138>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00f      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8003d64 <TIM_Base_SetConfig+0x140>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d68 <TIM_Base_SetConfig+0x144>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0x9a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d6c <TIM_Base_SetConfig+0x148>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a16      	ldr	r2, [pc, #88]	@ (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00f      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <TIM_Base_SetConfig+0x140>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <TIM_Base_SetConfig+0x144>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a15      	ldr	r2, [pc, #84]	@ (8003d6c <TIM_Base_SetConfig+0x148>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d103      	bne.n	8003d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d105      	bne.n	8003d42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	611a      	str	r2, [r3, #16]
  }
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40013400 	.word	0x40013400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	40014800 	.word	0x40014800

08003d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f023 0201 	bic.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f023 0302 	bic.w	r3, r3, #2
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a2c      	ldr	r2, [pc, #176]	@ (8003e7c <TIM_OC1_SetConfig+0x10c>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d00f      	beq.n	8003df0 <TIM_OC1_SetConfig+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e80 <TIM_OC1_SetConfig+0x110>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <TIM_OC1_SetConfig+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a2a      	ldr	r2, [pc, #168]	@ (8003e84 <TIM_OC1_SetConfig+0x114>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <TIM_OC1_SetConfig+0x80>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <TIM_OC1_SetConfig+0x118>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_OC1_SetConfig+0x80>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a28      	ldr	r2, [pc, #160]	@ (8003e8c <TIM_OC1_SetConfig+0x11c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10c      	bne.n	8003e0a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0308 	bic.w	r3, r3, #8
 8003df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e7c <TIM_OC1_SetConfig+0x10c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00f      	beq.n	8003e32 <TIM_OC1_SetConfig+0xc2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a1a      	ldr	r2, [pc, #104]	@ (8003e80 <TIM_OC1_SetConfig+0x110>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00b      	beq.n	8003e32 <TIM_OC1_SetConfig+0xc2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	@ (8003e84 <TIM_OC1_SetConfig+0x114>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d007      	beq.n	8003e32 <TIM_OC1_SetConfig+0xc2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a18      	ldr	r2, [pc, #96]	@ (8003e88 <TIM_OC1_SetConfig+0x118>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_OC1_SetConfig+0xc2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	@ (8003e8c <TIM_OC1_SetConfig+0x11c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d111      	bne.n	8003e56 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	621a      	str	r2, [r3, #32]
}
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40012c00 	.word	0x40012c00
 8003e80:	40013400 	.word	0x40013400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40014400 	.word	0x40014400
 8003e8c:	40014800 	.word	0x40014800

08003e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f023 0210 	bic.w	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0320 	bic.w	r3, r3, #32
 8003ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a28      	ldr	r2, [pc, #160]	@ (8003f90 <TIM_OC2_SetConfig+0x100>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC2_SetConfig+0x6c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <TIM_OC2_SetConfig+0x104>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f90 <TIM_OC2_SetConfig+0x100>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00f      	beq.n	8003f40 <TIM_OC2_SetConfig+0xb0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1c      	ldr	r2, [pc, #112]	@ (8003f94 <TIM_OC2_SetConfig+0x104>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_OC2_SetConfig+0xb0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <TIM_OC2_SetConfig+0x108>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_OC2_SetConfig+0xb0>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <TIM_OC2_SetConfig+0x10c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_OC2_SetConfig+0xb0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <TIM_OC2_SetConfig+0x110>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d113      	bne.n	8003f68 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a27      	ldr	r2, [pc, #156]	@ (80040a0 <TIM_OC3_SetConfig+0xfc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d003      	beq.n	800400e <TIM_OC3_SetConfig+0x6a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a26      	ldr	r2, [pc, #152]	@ (80040a4 <TIM_OC3_SetConfig+0x100>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10d      	bne.n	800402a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1c      	ldr	r2, [pc, #112]	@ (80040a0 <TIM_OC3_SetConfig+0xfc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <TIM_OC3_SetConfig+0xae>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a1b      	ldr	r2, [pc, #108]	@ (80040a4 <TIM_OC3_SetConfig+0x100>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_OC3_SetConfig+0xae>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a1a      	ldr	r2, [pc, #104]	@ (80040a8 <TIM_OC3_SetConfig+0x104>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_OC3_SetConfig+0xae>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a19      	ldr	r2, [pc, #100]	@ (80040ac <TIM_OC3_SetConfig+0x108>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC3_SetConfig+0xae>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a18      	ldr	r2, [pc, #96]	@ (80040b0 <TIM_OC3_SetConfig+0x10c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d113      	bne.n	800407a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	621a      	str	r2, [r3, #32]
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40013400 	.word	0x40013400
 80040a8:	40014000 	.word	0x40014000
 80040ac:	40014400 	.word	0x40014400
 80040b0:	40014800 	.word	0x40014800

080040b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a18      	ldr	r2, [pc, #96]	@ (8004174 <TIM_OC4_SetConfig+0xc0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00f      	beq.n	8004138 <TIM_OC4_SetConfig+0x84>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <TIM_OC4_SetConfig+0xc4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00b      	beq.n	8004138 <TIM_OC4_SetConfig+0x84>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a16      	ldr	r2, [pc, #88]	@ (800417c <TIM_OC4_SetConfig+0xc8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_OC4_SetConfig+0x84>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <TIM_OC4_SetConfig+0xcc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC4_SetConfig+0x84>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a14      	ldr	r2, [pc, #80]	@ (8004184 <TIM_OC4_SetConfig+0xd0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d109      	bne.n	800414c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800413e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	019b      	lsls	r3, r3, #6
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400
 800417c:	40014000 	.word	0x40014000
 8004180:	40014400 	.word	0x40014400
 8004184:	40014800 	.word	0x40014800

08004188 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	041b      	lsls	r3, r3, #16
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a17      	ldr	r2, [pc, #92]	@ (800423c <TIM_OC5_SetConfig+0xb4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00f      	beq.n	8004202 <TIM_OC5_SetConfig+0x7a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a16      	ldr	r2, [pc, #88]	@ (8004240 <TIM_OC5_SetConfig+0xb8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00b      	beq.n	8004202 <TIM_OC5_SetConfig+0x7a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a15      	ldr	r2, [pc, #84]	@ (8004244 <TIM_OC5_SetConfig+0xbc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <TIM_OC5_SetConfig+0x7a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <TIM_OC5_SetConfig+0xc0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC5_SetConfig+0x7a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a13      	ldr	r2, [pc, #76]	@ (800424c <TIM_OC5_SetConfig+0xc4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d109      	bne.n	8004216 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004208:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	051b      	lsls	r3, r3, #20
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <TIM_OC6_SetConfig+0xb8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00f      	beq.n	80042cc <TIM_OC6_SetConfig+0x7c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a17      	ldr	r2, [pc, #92]	@ (800430c <TIM_OC6_SetConfig+0xbc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00b      	beq.n	80042cc <TIM_OC6_SetConfig+0x7c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a16      	ldr	r2, [pc, #88]	@ (8004310 <TIM_OC6_SetConfig+0xc0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d007      	beq.n	80042cc <TIM_OC6_SetConfig+0x7c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <TIM_OC6_SetConfig+0xc4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC6_SetConfig+0x7c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a14      	ldr	r2, [pc, #80]	@ (8004318 <TIM_OC6_SetConfig+0xc8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d109      	bne.n	80042e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	029b      	lsls	r3, r3, #10
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40013400 	.word	0x40013400
 8004310:	40014000 	.word	0x40014000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800

0800431c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004338:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b70      	cmp	r3, #112	@ 0x70
 8004368:	d01a      	beq.n	80043a0 <TIM_SlaveTimer_SetConfig+0x84>
 800436a:	2b70      	cmp	r3, #112	@ 0x70
 800436c:	d860      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x114>
 800436e:	2b60      	cmp	r3, #96	@ 0x60
 8004370:	d054      	beq.n	800441c <TIM_SlaveTimer_SetConfig+0x100>
 8004372:	2b60      	cmp	r3, #96	@ 0x60
 8004374:	d85c      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x114>
 8004376:	2b50      	cmp	r3, #80	@ 0x50
 8004378:	d046      	beq.n	8004408 <TIM_SlaveTimer_SetConfig+0xec>
 800437a:	2b50      	cmp	r3, #80	@ 0x50
 800437c:	d858      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x114>
 800437e:	2b40      	cmp	r3, #64	@ 0x40
 8004380:	d019      	beq.n	80043b6 <TIM_SlaveTimer_SetConfig+0x9a>
 8004382:	2b40      	cmp	r3, #64	@ 0x40
 8004384:	d854      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x114>
 8004386:	2b30      	cmp	r3, #48	@ 0x30
 8004388:	d055      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x11a>
 800438a:	2b30      	cmp	r3, #48	@ 0x30
 800438c:	d850      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x114>
 800438e:	2b20      	cmp	r3, #32
 8004390:	d051      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x11a>
 8004392:	2b20      	cmp	r3, #32
 8004394:	d84c      	bhi.n	8004430 <TIM_SlaveTimer_SetConfig+0x114>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04d      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x11a>
 800439a:	2b10      	cmp	r3, #16
 800439c:	d04b      	beq.n	8004436 <TIM_SlaveTimer_SetConfig+0x11a>
 800439e:	e047      	b.n	8004430 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80043b0:	f000 f9cb 	bl	800474a <TIM_ETR_SetConfig>
      break;
 80043b4:	e040      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b05      	cmp	r3, #5
 80043bc:	d101      	bne.n	80043c2 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e03b      	b.n	800443a <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a1a      	ldr	r2, [r3, #32]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
      break;
 8004406:	e017      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004414:	461a      	mov	r2, r3
 8004416:	f000 f883 	bl	8004520 <TIM_TI1_ConfigInputStage>
      break;
 800441a:	e00d      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004428:	461a      	mov	r2, r3
 800442a:	f000 f8e5 	bl	80045f8 <TIM_TI2_ConfigInputStage>
      break;
 800442e:	e003      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	75fb      	strb	r3, [r7, #23]
      break;
 8004434:	e000      	b.n	8004438 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8004436:	bf00      	nop
  }

  return status;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 0201 	bic.w	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a26      	ldr	r2, [pc, #152]	@ (8004508 <TIM_TI1_SetConfig+0xc4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d017      	beq.n	80044a2 <TIM_TI1_SetConfig+0x5e>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004478:	d013      	beq.n	80044a2 <TIM_TI1_SetConfig+0x5e>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a23      	ldr	r2, [pc, #140]	@ (800450c <TIM_TI1_SetConfig+0xc8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00f      	beq.n	80044a2 <TIM_TI1_SetConfig+0x5e>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4a22      	ldr	r2, [pc, #136]	@ (8004510 <TIM_TI1_SetConfig+0xcc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00b      	beq.n	80044a2 <TIM_TI1_SetConfig+0x5e>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4a21      	ldr	r2, [pc, #132]	@ (8004514 <TIM_TI1_SetConfig+0xd0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d007      	beq.n	80044a2 <TIM_TI1_SetConfig+0x5e>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a20      	ldr	r2, [pc, #128]	@ (8004518 <TIM_TI1_SetConfig+0xd4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d003      	beq.n	80044a2 <TIM_TI1_SetConfig+0x5e>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <TIM_TI1_SetConfig+0xd8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <TIM_TI1_SetConfig+0x62>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <TIM_TI1_SetConfig+0x64>
 80044a6:	2300      	movs	r3, #0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e003      	b.n	80044c6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f023 030a 	bic.w	r3, r3, #10
 80044e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 030a 	and.w	r3, r3, #10
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	bf00      	nop
 80044fc:	371c      	adds	r7, #28
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800
 8004514:	40000c00 	.word	0x40000c00
 8004518:	40013400 	.word	0x40013400
 800451c:	40014000 	.word	0x40014000

08004520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f023 0201 	bic.w	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800454a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 030a 	bic.w	r3, r3, #10
 800455c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	621a      	str	r2, [r3, #32]
}
 8004572:	bf00      	nop
 8004574:	371c      	adds	r7, #28
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800457e:	b480      	push	{r7}
 8004580:	b087      	sub	sp, #28
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	031b      	lsls	r3, r3, #12
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	621a      	str	r2, [r3, #32]
}
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f023 0210 	bic.w	r2, r3, #16
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	031b      	lsls	r3, r3, #12
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004634:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	621a      	str	r2, [r3, #32]
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f023 0303 	bic.w	r3, r3, #3
 8004684:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004694:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	b2db      	uxtb	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	621a      	str	r2, [r3, #32]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800470e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	031b      	lsls	r3, r3, #12
 8004714:	b29b      	uxth	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004722:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	031b      	lsls	r3, r3, #12
 8004728:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800474a:	b480      	push	{r7}
 800474c:	b087      	sub	sp, #28
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004764:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	021a      	lsls	r2, r3, #8
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	431a      	orrs	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800478a:	b480      	push	{r7}
 800478c:	b087      	sub	sp, #28
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	2201      	movs	r2, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	401a      	ands	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	431a      	orrs	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e068      	b.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2e      	ldr	r2, [pc, #184]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2d      	ldr	r2, [pc, #180]	@ (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1e      	ldr	r2, [pc, #120]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d01d      	beq.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800485e:	d018      	beq.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1b      	ldr	r2, [pc, #108]	@ (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1a      	ldr	r2, [pc, #104]	@ (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a18      	ldr	r2, [pc, #96]	@ (80048dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a13      	ldr	r2, [pc, #76]	@ (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a14      	ldr	r2, [pc, #80]	@ (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d10c      	bne.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40013400 	.word	0x40013400
 80048d4:	40000400 	.word	0x40000400
 80048d8:	40000800 	.word	0x40000800
 80048dc:	40000c00 	.word	0x40000c00
 80048e0:	40014000 	.word	0x40014000

080048e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e065      	b.n	80049cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	@ (80049d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a14      	ldr	r2, [pc, #80]	@ (80049dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d115      	bne.n	80049ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004998:	051b      	lsls	r3, r3, #20
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40013400 	.word	0x40013400

080049e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e040      	b.n	8004ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc fb04 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	@ 0x24
 8004a48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fb6a 	bl	800513c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8af 	bl	8004bcc <UART_SetConfig>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e01b      	b.n	8004ab0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0201 	orr.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fbe9 	bl	8005280 <UART_CheckIdleState>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	@ 0x28
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d177      	bne.n	8004bc0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Transmit+0x24>
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e070      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2221      	movs	r2, #33	@ 0x21
 8004aec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aee:	f7fc fba3 	bl	8001238 <HAL_GetTick>
 8004af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b0c:	d108      	bne.n	8004b20 <HAL_UART_Transmit+0x68>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	e003      	b.n	8004b28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b28:	e02f      	b.n	8004b8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	@ 0x80
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 fc4b 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e03b      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	881a      	ldrh	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	3302      	adds	r3, #2
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e007      	b.n	8004b78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	781a      	ldrb	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1c9      	bne.n	8004b2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2140      	movs	r1, #64	@ 0x40
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fc15 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e005      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd0:	b08a      	sub	sp, #40	@ 0x28
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	69db      	ldr	r3, [r3, #28]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4ba4      	ldr	r3, [pc, #656]	@ (8004e8c <UART_SetConfig+0x2c0>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c04:	430b      	orrs	r3, r1
 8004c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a99      	ldr	r2, [pc, #612]	@ (8004e90 <UART_SetConfig+0x2c4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c34:	4313      	orrs	r3, r2
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a90      	ldr	r2, [pc, #576]	@ (8004e94 <UART_SetConfig+0x2c8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d126      	bne.n	8004ca4 <UART_SetConfig+0xd8>
 8004c56:	4b90      	ldr	r3, [pc, #576]	@ (8004e98 <UART_SetConfig+0x2cc>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d81b      	bhi.n	8004c9c <UART_SetConfig+0xd0>
 8004c64:	a201      	add	r2, pc, #4	@ (adr r2, 8004c6c <UART_SetConfig+0xa0>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	08004c85 	.word	0x08004c85
 8004c78:	08004c95 	.word	0x08004c95
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e116      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	e112      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c92:	e10e      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e10a      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e106      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7c      	ldr	r2, [pc, #496]	@ (8004e9c <UART_SetConfig+0x2d0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d138      	bne.n	8004d20 <UART_SetConfig+0x154>
 8004cae:	4b7a      	ldr	r3, [pc, #488]	@ (8004e98 <UART_SetConfig+0x2cc>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b0c      	cmp	r3, #12
 8004cba:	d82d      	bhi.n	8004d18 <UART_SetConfig+0x14c>
 8004cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc4 <UART_SetConfig+0xf8>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004d19 	.word	0x08004d19
 8004ccc:	08004d19 	.word	0x08004d19
 8004cd0:	08004d19 	.word	0x08004d19
 8004cd4:	08004d09 	.word	0x08004d09
 8004cd8:	08004d19 	.word	0x08004d19
 8004cdc:	08004d19 	.word	0x08004d19
 8004ce0:	08004d19 	.word	0x08004d19
 8004ce4:	08004d01 	.word	0x08004d01
 8004ce8:	08004d19 	.word	0x08004d19
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	08004d19 	.word	0x08004d19
 8004cf4:	08004d11 	.word	0x08004d11
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfe:	e0d8      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d00:	2302      	movs	r3, #2
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d06:	e0d4      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0e:	e0d0      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e0cc      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1e:	e0c8      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5e      	ldr	r2, [pc, #376]	@ (8004ea0 <UART_SetConfig+0x2d4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d125      	bne.n	8004d76 <UART_SetConfig+0x1aa>
 8004d2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004e98 <UART_SetConfig+0x2cc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d34:	2b30      	cmp	r3, #48	@ 0x30
 8004d36:	d016      	beq.n	8004d66 <UART_SetConfig+0x19a>
 8004d38:	2b30      	cmp	r3, #48	@ 0x30
 8004d3a:	d818      	bhi.n	8004d6e <UART_SetConfig+0x1a2>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d00a      	beq.n	8004d56 <UART_SetConfig+0x18a>
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d814      	bhi.n	8004d6e <UART_SetConfig+0x1a2>
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <UART_SetConfig+0x182>
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d008      	beq.n	8004d5e <UART_SetConfig+0x192>
 8004d4c:	e00f      	b.n	8004d6e <UART_SetConfig+0x1a2>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d54:	e0ad      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d56:	2302      	movs	r3, #2
 8004d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5c:	e0a9      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d5e:	2304      	movs	r3, #4
 8004d60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d64:	e0a5      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d66:	2308      	movs	r3, #8
 8004d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6c:	e0a1      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d6e:	2310      	movs	r3, #16
 8004d70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d74:	e09d      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea4 <UART_SetConfig+0x2d8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d125      	bne.n	8004dcc <UART_SetConfig+0x200>
 8004d80:	4b45      	ldr	r3, [pc, #276]	@ (8004e98 <UART_SetConfig+0x2cc>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d8c:	d016      	beq.n	8004dbc <UART_SetConfig+0x1f0>
 8004d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d90:	d818      	bhi.n	8004dc4 <UART_SetConfig+0x1f8>
 8004d92:	2b80      	cmp	r3, #128	@ 0x80
 8004d94:	d00a      	beq.n	8004dac <UART_SetConfig+0x1e0>
 8004d96:	2b80      	cmp	r3, #128	@ 0x80
 8004d98:	d814      	bhi.n	8004dc4 <UART_SetConfig+0x1f8>
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <UART_SetConfig+0x1d8>
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d008      	beq.n	8004db4 <UART_SetConfig+0x1e8>
 8004da2:	e00f      	b.n	8004dc4 <UART_SetConfig+0x1f8>
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004daa:	e082      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004dac:	2302      	movs	r3, #2
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db2:	e07e      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dba:	e07a      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc2:	e076      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dca:	e072      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a35      	ldr	r2, [pc, #212]	@ (8004ea8 <UART_SetConfig+0x2dc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d12a      	bne.n	8004e2c <UART_SetConfig+0x260>
 8004dd6:	4b30      	ldr	r3, [pc, #192]	@ (8004e98 <UART_SetConfig+0x2cc>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de4:	d01a      	beq.n	8004e1c <UART_SetConfig+0x250>
 8004de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dea:	d81b      	bhi.n	8004e24 <UART_SetConfig+0x258>
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df0:	d00c      	beq.n	8004e0c <UART_SetConfig+0x240>
 8004df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df6:	d815      	bhi.n	8004e24 <UART_SetConfig+0x258>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <UART_SetConfig+0x238>
 8004dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e00:	d008      	beq.n	8004e14 <UART_SetConfig+0x248>
 8004e02:	e00f      	b.n	8004e24 <UART_SetConfig+0x258>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e0a:	e052      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e12:	e04e      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e1a:	e04a      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e22:	e046      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2a:	e042      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a17      	ldr	r2, [pc, #92]	@ (8004e90 <UART_SetConfig+0x2c4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d13a      	bne.n	8004eac <UART_SetConfig+0x2e0>
 8004e36:	4b18      	ldr	r3, [pc, #96]	@ (8004e98 <UART_SetConfig+0x2cc>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e44:	d01a      	beq.n	8004e7c <UART_SetConfig+0x2b0>
 8004e46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e4a:	d81b      	bhi.n	8004e84 <UART_SetConfig+0x2b8>
 8004e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e50:	d00c      	beq.n	8004e6c <UART_SetConfig+0x2a0>
 8004e52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e56:	d815      	bhi.n	8004e84 <UART_SetConfig+0x2b8>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <UART_SetConfig+0x298>
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e60:	d008      	beq.n	8004e74 <UART_SetConfig+0x2a8>
 8004e62:	e00f      	b.n	8004e84 <UART_SetConfig+0x2b8>
 8004e64:	2300      	movs	r3, #0
 8004e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6a:	e022      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e72:	e01e      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e74:	2304      	movs	r3, #4
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7a:	e01a      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e016      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e84:	2310      	movs	r3, #16
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e012      	b.n	8004eb2 <UART_SetConfig+0x2e6>
 8004e8c:	efff69f3 	.word	0xefff69f3
 8004e90:	40008000 	.word	0x40008000
 8004e94:	40013800 	.word	0x40013800
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	40004400 	.word	0x40004400
 8004ea0:	40004800 	.word	0x40004800
 8004ea4:	40004c00 	.word	0x40004c00
 8004ea8:	40005000 	.word	0x40005000
 8004eac:	2310      	movs	r3, #16
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a9f      	ldr	r2, [pc, #636]	@ (8005134 <UART_SetConfig+0x568>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d17a      	bne.n	8004fb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d824      	bhi.n	8004f0e <UART_SetConfig+0x342>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <UART_SetConfig+0x300>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004ef1 	.word	0x08004ef1
 8004ed0:	08004f0f 	.word	0x08004f0f
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f0f 	.word	0x08004f0f
 8004edc:	08004eff 	.word	0x08004eff
 8004ee0:	08004f0f 	.word	0x08004f0f
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f0f 	.word	0x08004f0f
 8004eec:	08004f07 	.word	0x08004f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef0:	f7fd fa5a 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8004ef4:	61f8      	str	r0, [r7, #28]
        break;
 8004ef6:	e010      	b.n	8004f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8005138 <UART_SetConfig+0x56c>)
 8004efa:	61fb      	str	r3, [r7, #28]
        break;
 8004efc:	e00d      	b.n	8004f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efe:	f7fd f9bb 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 8004f02:	61f8      	str	r0, [r7, #28]
        break;
 8004f04:	e009      	b.n	8004f1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0a:	61fb      	str	r3, [r7, #28]
        break;
 8004f0c:	e005      	b.n	8004f1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80fb 	beq.w	8005118 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d305      	bcc.n	8004f3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d903      	bls.n	8004f46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f44:	e0e8      	b.n	8005118 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	461c      	mov	r4, r3
 8004f4c:	4615      	mov	r5, r2
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	022b      	lsls	r3, r5, #8
 8004f58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f5c:	0222      	lsls	r2, r4, #8
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	6849      	ldr	r1, [r1, #4]
 8004f62:	0849      	lsrs	r1, r1, #1
 8004f64:	2000      	movs	r0, #0
 8004f66:	4688      	mov	r8, r1
 8004f68:	4681      	mov	r9, r0
 8004f6a:	eb12 0a08 	adds.w	sl, r2, r8
 8004f6e:	eb43 0b09 	adc.w	fp, r3, r9
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f80:	4650      	mov	r0, sl
 8004f82:	4659      	mov	r1, fp
 8004f84:	f7fb fb30 	bl	80005e8 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f96:	d308      	bcc.n	8004faa <UART_SetConfig+0x3de>
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f9e:	d204      	bcs.n	8004faa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e0b6      	b.n	8005118 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fb0:	e0b2      	b.n	8005118 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fba:	d15e      	bne.n	800507a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d828      	bhi.n	8005016 <UART_SetConfig+0x44a>
 8004fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <UART_SetConfig+0x400>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08004ff9 	.word	0x08004ff9
 8004fd4:	08005001 	.word	0x08005001
 8004fd8:	08005017 	.word	0x08005017
 8004fdc:	08005007 	.word	0x08005007
 8004fe0:	08005017 	.word	0x08005017
 8004fe4:	08005017 	.word	0x08005017
 8004fe8:	08005017 	.word	0x08005017
 8004fec:	0800500f 	.word	0x0800500f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff0:	f7fd f9da 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8004ff4:	61f8      	str	r0, [r7, #28]
        break;
 8004ff6:	e014      	b.n	8005022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ff8:	f7fd f9ec 	bl	80023d4 <HAL_RCC_GetPCLK2Freq>
 8004ffc:	61f8      	str	r0, [r7, #28]
        break;
 8004ffe:	e010      	b.n	8005022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005000:	4b4d      	ldr	r3, [pc, #308]	@ (8005138 <UART_SetConfig+0x56c>)
 8005002:	61fb      	str	r3, [r7, #28]
        break;
 8005004:	e00d      	b.n	8005022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005006:	f7fd f937 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 800500a:	61f8      	str	r0, [r7, #28]
        break;
 800500c:	e009      	b.n	8005022 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800500e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005012:	61fb      	str	r3, [r7, #28]
        break;
 8005014:	e005      	b.n	8005022 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d077      	beq.n	8005118 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	005a      	lsls	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	441a      	add	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	fbb2 f3f3 	udiv	r3, r2, r3
 800503c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b0f      	cmp	r3, #15
 8005042:	d916      	bls.n	8005072 <UART_SetConfig+0x4a6>
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504a:	d212      	bcs.n	8005072 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	b29b      	uxth	r3, r3
 8005050:	f023 030f 	bic.w	r3, r3, #15
 8005054:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	b29b      	uxth	r3, r3
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	b29a      	uxth	r2, r3
 8005062:	8afb      	ldrh	r3, [r7, #22]
 8005064:	4313      	orrs	r3, r2
 8005066:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	8afa      	ldrh	r2, [r7, #22]
 800506e:	60da      	str	r2, [r3, #12]
 8005070:	e052      	b.n	8005118 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005078:	e04e      	b.n	8005118 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800507a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800507e:	2b08      	cmp	r3, #8
 8005080:	d827      	bhi.n	80050d2 <UART_SetConfig+0x506>
 8005082:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <UART_SetConfig+0x4bc>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	080050d3 	.word	0x080050d3
 8005098:	080050c3 	.word	0x080050c3
 800509c:	080050d3 	.word	0x080050d3
 80050a0:	080050d3 	.word	0x080050d3
 80050a4:	080050d3 	.word	0x080050d3
 80050a8:	080050cb 	.word	0x080050cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fd f97c 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 80050b0:	61f8      	str	r0, [r7, #28]
        break;
 80050b2:	e014      	b.n	80050de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fd f98e 	bl	80023d4 <HAL_RCC_GetPCLK2Freq>
 80050b8:	61f8      	str	r0, [r7, #28]
        break;
 80050ba:	e010      	b.n	80050de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005138 <UART_SetConfig+0x56c>)
 80050be:	61fb      	str	r3, [r7, #28]
        break;
 80050c0:	e00d      	b.n	80050de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c2:	f7fd f8d9 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 80050c6:	61f8      	str	r0, [r7, #28]
        break;
 80050c8:	e009      	b.n	80050de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ce:	61fb      	str	r3, [r7, #28]
        break;
 80050d0:	e005      	b.n	80050de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050dc:	bf00      	nop
    }

    if (pclk != 0U)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d019      	beq.n	8005118 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	085a      	lsrs	r2, r3, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	441a      	add	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b0f      	cmp	r3, #15
 80050fc:	d909      	bls.n	8005112 <UART_SetConfig+0x546>
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005104:	d205      	bcs.n	8005112 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60da      	str	r2, [r3, #12]
 8005110:	e002      	b.n	8005118 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005124:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	@ 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005132:	bf00      	nop
 8005134:	40008000 	.word	0x40008000
 8005138:	00f42400 	.word	0x00f42400

0800513c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800523a:	d10a      	bne.n	8005252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	605a      	str	r2, [r3, #4]
  }
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b098      	sub	sp, #96	@ 0x60
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005290:	f7fb ffd2 	bl	8001238 <HAL_GetTick>
 8005294:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d12e      	bne.n	8005302 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ac:	2200      	movs	r2, #0
 80052ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f88c 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d021      	beq.n	8005302 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e062      	b.n	80053c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d149      	bne.n	80053a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005310:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005318:	2200      	movs	r2, #0
 800531a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f856 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d03c      	beq.n	80053a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	e853 3f00 	ldrex	r3, [r3]
 8005336:	623b      	str	r3, [r7, #32]
   return(result);
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800533e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	461a      	mov	r2, r3
 8005346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005348:	633b      	str	r3, [r7, #48]	@ 0x30
 800534a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800534e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005350:	e841 2300 	strex	r3, r2, [r1]
 8005354:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1e6      	bne.n	800532a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3308      	adds	r3, #8
 8005362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	60fb      	str	r3, [r7, #12]
   return(result);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3308      	adds	r3, #8
 800537a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800537c:	61fa      	str	r2, [r7, #28]
 800537e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	69b9      	ldr	r1, [r7, #24]
 8005382:	69fa      	ldr	r2, [r7, #28]
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	617b      	str	r3, [r7, #20]
   return(result);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e5      	bne.n	800535c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e011      	b.n	80053c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3758      	adds	r7, #88	@ 0x58
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e0:	e04f      	b.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d04b      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fb ff25 	bl	8001238 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <UART_WaitOnFlagUntilTimeout+0x30>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e04e      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d037      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b80      	cmp	r3, #128	@ 0x80
 8005416:	d034      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b40      	cmp	r3, #64	@ 0x40
 800541c:	d031      	beq.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d110      	bne.n	800544e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2208      	movs	r2, #8
 8005432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f838 	bl	80054aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2208      	movs	r2, #8
 800543e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e029      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800545c:	d111      	bne.n	8005482 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f81e 	bl	80054aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e00f      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4013      	ands	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	bf0c      	ite	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	2300      	movne	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	429a      	cmp	r2, r3
 800549e:	d0a0      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b095      	sub	sp, #84	@ 0x54
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e6      	bne.n	80054b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005504:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800550a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551c:	2b01      	cmp	r3, #1
 800551e:	d118      	bne.n	8005552 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	60bb      	str	r3, [r7, #8]
   return(result);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 0310 	bic.w	r3, r3, #16
 8005534:	647b      	str	r3, [r7, #68]	@ 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6979      	ldr	r1, [r7, #20]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	613b      	str	r3, [r7, #16]
   return(result);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e6      	bne.n	8005520 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005566:	bf00      	nop
 8005568:	3754      	adds	r7, #84	@ 0x54
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <sniprintf>:
 8005574:	b40c      	push	{r2, r3}
 8005576:	b530      	push	{r4, r5, lr}
 8005578:	4b17      	ldr	r3, [pc, #92]	@ (80055d8 <sniprintf+0x64>)
 800557a:	1e0c      	subs	r4, r1, #0
 800557c:	681d      	ldr	r5, [r3, #0]
 800557e:	b09d      	sub	sp, #116	@ 0x74
 8005580:	da08      	bge.n	8005594 <sniprintf+0x20>
 8005582:	238b      	movs	r3, #139	@ 0x8b
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	f04f 30ff 	mov.w	r0, #4294967295
 800558a:	b01d      	add	sp, #116	@ 0x74
 800558c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005590:	b002      	add	sp, #8
 8005592:	4770      	bx	lr
 8005594:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800559c:	bf14      	ite	ne
 800559e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80055a2:	4623      	moveq	r3, r4
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055ac:	9002      	str	r0, [sp, #8]
 80055ae:	9006      	str	r0, [sp, #24]
 80055b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80055b6:	ab21      	add	r3, sp, #132	@ 0x84
 80055b8:	a902      	add	r1, sp, #8
 80055ba:	4628      	mov	r0, r5
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	f000 f995 	bl	80058ec <_svfiprintf_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	bfbc      	itt	lt
 80055c6:	238b      	movlt	r3, #139	@ 0x8b
 80055c8:	602b      	strlt	r3, [r5, #0]
 80055ca:	2c00      	cmp	r4, #0
 80055cc:	d0dd      	beq.n	800558a <sniprintf+0x16>
 80055ce:	9b02      	ldr	r3, [sp, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e7d9      	b.n	800558a <sniprintf+0x16>
 80055d6:	bf00      	nop
 80055d8:	2000000c 	.word	0x2000000c

080055dc <memset>:
 80055dc:	4402      	add	r2, r0
 80055de:	4603      	mov	r3, r0
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d100      	bne.n	80055e6 <memset+0xa>
 80055e4:	4770      	bx	lr
 80055e6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ea:	e7f9      	b.n	80055e0 <memset+0x4>

080055ec <__errno>:
 80055ec:	4b01      	ldr	r3, [pc, #4]	@ (80055f4 <__errno+0x8>)
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	2000000c 	.word	0x2000000c

080055f8 <__libc_init_array>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005630 <__libc_init_array+0x38>)
 80055fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005634 <__libc_init_array+0x3c>)
 80055fe:	1b64      	subs	r4, r4, r5
 8005600:	10a4      	asrs	r4, r4, #2
 8005602:	2600      	movs	r6, #0
 8005604:	42a6      	cmp	r6, r4
 8005606:	d109      	bne.n	800561c <__libc_init_array+0x24>
 8005608:	4d0b      	ldr	r5, [pc, #44]	@ (8005638 <__libc_init_array+0x40>)
 800560a:	4c0c      	ldr	r4, [pc, #48]	@ (800563c <__libc_init_array+0x44>)
 800560c:	f000 fc66 	bl	8005edc <_init>
 8005610:	1b64      	subs	r4, r4, r5
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	2600      	movs	r6, #0
 8005616:	42a6      	cmp	r6, r4
 8005618:	d105      	bne.n	8005626 <__libc_init_array+0x2e>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005620:	4798      	blx	r3
 8005622:	3601      	adds	r6, #1
 8005624:	e7ee      	b.n	8005604 <__libc_init_array+0xc>
 8005626:	f855 3b04 	ldr.w	r3, [r5], #4
 800562a:	4798      	blx	r3
 800562c:	3601      	adds	r6, #1
 800562e:	e7f2      	b.n	8005616 <__libc_init_array+0x1e>
 8005630:	08005f9c 	.word	0x08005f9c
 8005634:	08005f9c 	.word	0x08005f9c
 8005638:	08005f9c 	.word	0x08005f9c
 800563c:	08005fa0 	.word	0x08005fa0

08005640 <__retarget_lock_acquire_recursive>:
 8005640:	4770      	bx	lr

08005642 <__retarget_lock_release_recursive>:
 8005642:	4770      	bx	lr

08005644 <_free_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4605      	mov	r5, r0
 8005648:	2900      	cmp	r1, #0
 800564a:	d041      	beq.n	80056d0 <_free_r+0x8c>
 800564c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005650:	1f0c      	subs	r4, r1, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	bfb8      	it	lt
 8005656:	18e4      	addlt	r4, r4, r3
 8005658:	f000 f8e0 	bl	800581c <__malloc_lock>
 800565c:	4a1d      	ldr	r2, [pc, #116]	@ (80056d4 <_free_r+0x90>)
 800565e:	6813      	ldr	r3, [r2, #0]
 8005660:	b933      	cbnz	r3, 8005670 <_free_r+0x2c>
 8005662:	6063      	str	r3, [r4, #4]
 8005664:	6014      	str	r4, [r2, #0]
 8005666:	4628      	mov	r0, r5
 8005668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800566c:	f000 b8dc 	b.w	8005828 <__malloc_unlock>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d908      	bls.n	8005686 <_free_r+0x42>
 8005674:	6820      	ldr	r0, [r4, #0]
 8005676:	1821      	adds	r1, r4, r0
 8005678:	428b      	cmp	r3, r1
 800567a:	bf01      	itttt	eq
 800567c:	6819      	ldreq	r1, [r3, #0]
 800567e:	685b      	ldreq	r3, [r3, #4]
 8005680:	1809      	addeq	r1, r1, r0
 8005682:	6021      	streq	r1, [r4, #0]
 8005684:	e7ed      	b.n	8005662 <_free_r+0x1e>
 8005686:	461a      	mov	r2, r3
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	b10b      	cbz	r3, 8005690 <_free_r+0x4c>
 800568c:	42a3      	cmp	r3, r4
 800568e:	d9fa      	bls.n	8005686 <_free_r+0x42>
 8005690:	6811      	ldr	r1, [r2, #0]
 8005692:	1850      	adds	r0, r2, r1
 8005694:	42a0      	cmp	r0, r4
 8005696:	d10b      	bne.n	80056b0 <_free_r+0x6c>
 8005698:	6820      	ldr	r0, [r4, #0]
 800569a:	4401      	add	r1, r0
 800569c:	1850      	adds	r0, r2, r1
 800569e:	4283      	cmp	r3, r0
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	d1e0      	bne.n	8005666 <_free_r+0x22>
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	6053      	str	r3, [r2, #4]
 80056aa:	4408      	add	r0, r1
 80056ac:	6010      	str	r0, [r2, #0]
 80056ae:	e7da      	b.n	8005666 <_free_r+0x22>
 80056b0:	d902      	bls.n	80056b8 <_free_r+0x74>
 80056b2:	230c      	movs	r3, #12
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	e7d6      	b.n	8005666 <_free_r+0x22>
 80056b8:	6820      	ldr	r0, [r4, #0]
 80056ba:	1821      	adds	r1, r4, r0
 80056bc:	428b      	cmp	r3, r1
 80056be:	bf04      	itt	eq
 80056c0:	6819      	ldreq	r1, [r3, #0]
 80056c2:	685b      	ldreq	r3, [r3, #4]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	bf04      	itt	eq
 80056c8:	1809      	addeq	r1, r1, r0
 80056ca:	6021      	streq	r1, [r4, #0]
 80056cc:	6054      	str	r4, [r2, #4]
 80056ce:	e7ca      	b.n	8005666 <_free_r+0x22>
 80056d0:	bd38      	pop	{r3, r4, r5, pc}
 80056d2:	bf00      	nop
 80056d4:	2000035c 	.word	0x2000035c

080056d8 <sbrk_aligned>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	4e0f      	ldr	r6, [pc, #60]	@ (8005718 <sbrk_aligned+0x40>)
 80056dc:	460c      	mov	r4, r1
 80056de:	6831      	ldr	r1, [r6, #0]
 80056e0:	4605      	mov	r5, r0
 80056e2:	b911      	cbnz	r1, 80056ea <sbrk_aligned+0x12>
 80056e4:	f000 fba6 	bl	8005e34 <_sbrk_r>
 80056e8:	6030      	str	r0, [r6, #0]
 80056ea:	4621      	mov	r1, r4
 80056ec:	4628      	mov	r0, r5
 80056ee:	f000 fba1 	bl	8005e34 <_sbrk_r>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d103      	bne.n	80056fe <sbrk_aligned+0x26>
 80056f6:	f04f 34ff 	mov.w	r4, #4294967295
 80056fa:	4620      	mov	r0, r4
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	1cc4      	adds	r4, r0, #3
 8005700:	f024 0403 	bic.w	r4, r4, #3
 8005704:	42a0      	cmp	r0, r4
 8005706:	d0f8      	beq.n	80056fa <sbrk_aligned+0x22>
 8005708:	1a21      	subs	r1, r4, r0
 800570a:	4628      	mov	r0, r5
 800570c:	f000 fb92 	bl	8005e34 <_sbrk_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d1f2      	bne.n	80056fa <sbrk_aligned+0x22>
 8005714:	e7ef      	b.n	80056f6 <sbrk_aligned+0x1e>
 8005716:	bf00      	nop
 8005718:	20000358 	.word	0x20000358

0800571c <_malloc_r>:
 800571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005720:	1ccd      	adds	r5, r1, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	3508      	adds	r5, #8
 8005728:	2d0c      	cmp	r5, #12
 800572a:	bf38      	it	cc
 800572c:	250c      	movcc	r5, #12
 800572e:	2d00      	cmp	r5, #0
 8005730:	4606      	mov	r6, r0
 8005732:	db01      	blt.n	8005738 <_malloc_r+0x1c>
 8005734:	42a9      	cmp	r1, r5
 8005736:	d904      	bls.n	8005742 <_malloc_r+0x26>
 8005738:	230c      	movs	r3, #12
 800573a:	6033      	str	r3, [r6, #0]
 800573c:	2000      	movs	r0, #0
 800573e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005742:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005818 <_malloc_r+0xfc>
 8005746:	f000 f869 	bl	800581c <__malloc_lock>
 800574a:	f8d8 3000 	ldr.w	r3, [r8]
 800574e:	461c      	mov	r4, r3
 8005750:	bb44      	cbnz	r4, 80057a4 <_malloc_r+0x88>
 8005752:	4629      	mov	r1, r5
 8005754:	4630      	mov	r0, r6
 8005756:	f7ff ffbf 	bl	80056d8 <sbrk_aligned>
 800575a:	1c43      	adds	r3, r0, #1
 800575c:	4604      	mov	r4, r0
 800575e:	d158      	bne.n	8005812 <_malloc_r+0xf6>
 8005760:	f8d8 4000 	ldr.w	r4, [r8]
 8005764:	4627      	mov	r7, r4
 8005766:	2f00      	cmp	r7, #0
 8005768:	d143      	bne.n	80057f2 <_malloc_r+0xd6>
 800576a:	2c00      	cmp	r4, #0
 800576c:	d04b      	beq.n	8005806 <_malloc_r+0xea>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	4639      	mov	r1, r7
 8005772:	4630      	mov	r0, r6
 8005774:	eb04 0903 	add.w	r9, r4, r3
 8005778:	f000 fb5c 	bl	8005e34 <_sbrk_r>
 800577c:	4581      	cmp	r9, r0
 800577e:	d142      	bne.n	8005806 <_malloc_r+0xea>
 8005780:	6821      	ldr	r1, [r4, #0]
 8005782:	1a6d      	subs	r5, r5, r1
 8005784:	4629      	mov	r1, r5
 8005786:	4630      	mov	r0, r6
 8005788:	f7ff ffa6 	bl	80056d8 <sbrk_aligned>
 800578c:	3001      	adds	r0, #1
 800578e:	d03a      	beq.n	8005806 <_malloc_r+0xea>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	442b      	add	r3, r5
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	f8d8 3000 	ldr.w	r3, [r8]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	bb62      	cbnz	r2, 80057f8 <_malloc_r+0xdc>
 800579e:	f8c8 7000 	str.w	r7, [r8]
 80057a2:	e00f      	b.n	80057c4 <_malloc_r+0xa8>
 80057a4:	6822      	ldr	r2, [r4, #0]
 80057a6:	1b52      	subs	r2, r2, r5
 80057a8:	d420      	bmi.n	80057ec <_malloc_r+0xd0>
 80057aa:	2a0b      	cmp	r2, #11
 80057ac:	d917      	bls.n	80057de <_malloc_r+0xc2>
 80057ae:	1961      	adds	r1, r4, r5
 80057b0:	42a3      	cmp	r3, r4
 80057b2:	6025      	str	r5, [r4, #0]
 80057b4:	bf18      	it	ne
 80057b6:	6059      	strne	r1, [r3, #4]
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	bf08      	it	eq
 80057bc:	f8c8 1000 	streq.w	r1, [r8]
 80057c0:	5162      	str	r2, [r4, r5]
 80057c2:	604b      	str	r3, [r1, #4]
 80057c4:	4630      	mov	r0, r6
 80057c6:	f000 f82f 	bl	8005828 <__malloc_unlock>
 80057ca:	f104 000b 	add.w	r0, r4, #11
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	f020 0007 	bic.w	r0, r0, #7
 80057d4:	1ac2      	subs	r2, r0, r3
 80057d6:	bf1c      	itt	ne
 80057d8:	1a1b      	subne	r3, r3, r0
 80057da:	50a3      	strne	r3, [r4, r2]
 80057dc:	e7af      	b.n	800573e <_malloc_r+0x22>
 80057de:	6862      	ldr	r2, [r4, #4]
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	bf0c      	ite	eq
 80057e4:	f8c8 2000 	streq.w	r2, [r8]
 80057e8:	605a      	strne	r2, [r3, #4]
 80057ea:	e7eb      	b.n	80057c4 <_malloc_r+0xa8>
 80057ec:	4623      	mov	r3, r4
 80057ee:	6864      	ldr	r4, [r4, #4]
 80057f0:	e7ae      	b.n	8005750 <_malloc_r+0x34>
 80057f2:	463c      	mov	r4, r7
 80057f4:	687f      	ldr	r7, [r7, #4]
 80057f6:	e7b6      	b.n	8005766 <_malloc_r+0x4a>
 80057f8:	461a      	mov	r2, r3
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d1fb      	bne.n	80057f8 <_malloc_r+0xdc>
 8005800:	2300      	movs	r3, #0
 8005802:	6053      	str	r3, [r2, #4]
 8005804:	e7de      	b.n	80057c4 <_malloc_r+0xa8>
 8005806:	230c      	movs	r3, #12
 8005808:	6033      	str	r3, [r6, #0]
 800580a:	4630      	mov	r0, r6
 800580c:	f000 f80c 	bl	8005828 <__malloc_unlock>
 8005810:	e794      	b.n	800573c <_malloc_r+0x20>
 8005812:	6005      	str	r5, [r0, #0]
 8005814:	e7d6      	b.n	80057c4 <_malloc_r+0xa8>
 8005816:	bf00      	nop
 8005818:	2000035c 	.word	0x2000035c

0800581c <__malloc_lock>:
 800581c:	4801      	ldr	r0, [pc, #4]	@ (8005824 <__malloc_lock+0x8>)
 800581e:	f7ff bf0f 	b.w	8005640 <__retarget_lock_acquire_recursive>
 8005822:	bf00      	nop
 8005824:	20000354 	.word	0x20000354

08005828 <__malloc_unlock>:
 8005828:	4801      	ldr	r0, [pc, #4]	@ (8005830 <__malloc_unlock+0x8>)
 800582a:	f7ff bf0a 	b.w	8005642 <__retarget_lock_release_recursive>
 800582e:	bf00      	nop
 8005830:	20000354 	.word	0x20000354

08005834 <__ssputs_r>:
 8005834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	688e      	ldr	r6, [r1, #8]
 800583a:	461f      	mov	r7, r3
 800583c:	42be      	cmp	r6, r7
 800583e:	680b      	ldr	r3, [r1, #0]
 8005840:	4682      	mov	sl, r0
 8005842:	460c      	mov	r4, r1
 8005844:	4690      	mov	r8, r2
 8005846:	d82d      	bhi.n	80058a4 <__ssputs_r+0x70>
 8005848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800584c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005850:	d026      	beq.n	80058a0 <__ssputs_r+0x6c>
 8005852:	6965      	ldr	r5, [r4, #20]
 8005854:	6909      	ldr	r1, [r1, #16]
 8005856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800585a:	eba3 0901 	sub.w	r9, r3, r1
 800585e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005862:	1c7b      	adds	r3, r7, #1
 8005864:	444b      	add	r3, r9
 8005866:	106d      	asrs	r5, r5, #1
 8005868:	429d      	cmp	r5, r3
 800586a:	bf38      	it	cc
 800586c:	461d      	movcc	r5, r3
 800586e:	0553      	lsls	r3, r2, #21
 8005870:	d527      	bpl.n	80058c2 <__ssputs_r+0x8e>
 8005872:	4629      	mov	r1, r5
 8005874:	f7ff ff52 	bl	800571c <_malloc_r>
 8005878:	4606      	mov	r6, r0
 800587a:	b360      	cbz	r0, 80058d6 <__ssputs_r+0xa2>
 800587c:	6921      	ldr	r1, [r4, #16]
 800587e:	464a      	mov	r2, r9
 8005880:	f000 fae8 	bl	8005e54 <memcpy>
 8005884:	89a3      	ldrh	r3, [r4, #12]
 8005886:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800588a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800588e:	81a3      	strh	r3, [r4, #12]
 8005890:	6126      	str	r6, [r4, #16]
 8005892:	6165      	str	r5, [r4, #20]
 8005894:	444e      	add	r6, r9
 8005896:	eba5 0509 	sub.w	r5, r5, r9
 800589a:	6026      	str	r6, [r4, #0]
 800589c:	60a5      	str	r5, [r4, #8]
 800589e:	463e      	mov	r6, r7
 80058a0:	42be      	cmp	r6, r7
 80058a2:	d900      	bls.n	80058a6 <__ssputs_r+0x72>
 80058a4:	463e      	mov	r6, r7
 80058a6:	6820      	ldr	r0, [r4, #0]
 80058a8:	4632      	mov	r2, r6
 80058aa:	4641      	mov	r1, r8
 80058ac:	f000 faa8 	bl	8005e00 <memmove>
 80058b0:	68a3      	ldr	r3, [r4, #8]
 80058b2:	1b9b      	subs	r3, r3, r6
 80058b4:	60a3      	str	r3, [r4, #8]
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	4433      	add	r3, r6
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	2000      	movs	r0, #0
 80058be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058c2:	462a      	mov	r2, r5
 80058c4:	f000 fad4 	bl	8005e70 <_realloc_r>
 80058c8:	4606      	mov	r6, r0
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d1e0      	bne.n	8005890 <__ssputs_r+0x5c>
 80058ce:	6921      	ldr	r1, [r4, #16]
 80058d0:	4650      	mov	r0, sl
 80058d2:	f7ff feb7 	bl	8005644 <_free_r>
 80058d6:	230c      	movs	r3, #12
 80058d8:	f8ca 3000 	str.w	r3, [sl]
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	e7e9      	b.n	80058be <__ssputs_r+0x8a>
	...

080058ec <_svfiprintf_r>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	4698      	mov	r8, r3
 80058f2:	898b      	ldrh	r3, [r1, #12]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	b09d      	sub	sp, #116	@ 0x74
 80058f8:	4607      	mov	r7, r0
 80058fa:	460d      	mov	r5, r1
 80058fc:	4614      	mov	r4, r2
 80058fe:	d510      	bpl.n	8005922 <_svfiprintf_r+0x36>
 8005900:	690b      	ldr	r3, [r1, #16]
 8005902:	b973      	cbnz	r3, 8005922 <_svfiprintf_r+0x36>
 8005904:	2140      	movs	r1, #64	@ 0x40
 8005906:	f7ff ff09 	bl	800571c <_malloc_r>
 800590a:	6028      	str	r0, [r5, #0]
 800590c:	6128      	str	r0, [r5, #16]
 800590e:	b930      	cbnz	r0, 800591e <_svfiprintf_r+0x32>
 8005910:	230c      	movs	r3, #12
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	b01d      	add	sp, #116	@ 0x74
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591e:	2340      	movs	r3, #64	@ 0x40
 8005920:	616b      	str	r3, [r5, #20]
 8005922:	2300      	movs	r3, #0
 8005924:	9309      	str	r3, [sp, #36]	@ 0x24
 8005926:	2320      	movs	r3, #32
 8005928:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800592c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005930:	2330      	movs	r3, #48	@ 0x30
 8005932:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ad0 <_svfiprintf_r+0x1e4>
 8005936:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800593a:	f04f 0901 	mov.w	r9, #1
 800593e:	4623      	mov	r3, r4
 8005940:	469a      	mov	sl, r3
 8005942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005946:	b10a      	cbz	r2, 800594c <_svfiprintf_r+0x60>
 8005948:	2a25      	cmp	r2, #37	@ 0x25
 800594a:	d1f9      	bne.n	8005940 <_svfiprintf_r+0x54>
 800594c:	ebba 0b04 	subs.w	fp, sl, r4
 8005950:	d00b      	beq.n	800596a <_svfiprintf_r+0x7e>
 8005952:	465b      	mov	r3, fp
 8005954:	4622      	mov	r2, r4
 8005956:	4629      	mov	r1, r5
 8005958:	4638      	mov	r0, r7
 800595a:	f7ff ff6b 	bl	8005834 <__ssputs_r>
 800595e:	3001      	adds	r0, #1
 8005960:	f000 80a7 	beq.w	8005ab2 <_svfiprintf_r+0x1c6>
 8005964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005966:	445a      	add	r2, fp
 8005968:	9209      	str	r2, [sp, #36]	@ 0x24
 800596a:	f89a 3000 	ldrb.w	r3, [sl]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 809f 	beq.w	8005ab2 <_svfiprintf_r+0x1c6>
 8005974:	2300      	movs	r3, #0
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800597e:	f10a 0a01 	add.w	sl, sl, #1
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	9307      	str	r3, [sp, #28]
 8005986:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800598a:	931a      	str	r3, [sp, #104]	@ 0x68
 800598c:	4654      	mov	r4, sl
 800598e:	2205      	movs	r2, #5
 8005990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005994:	484e      	ldr	r0, [pc, #312]	@ (8005ad0 <_svfiprintf_r+0x1e4>)
 8005996:	f7fa fc1b 	bl	80001d0 <memchr>
 800599a:	9a04      	ldr	r2, [sp, #16]
 800599c:	b9d8      	cbnz	r0, 80059d6 <_svfiprintf_r+0xea>
 800599e:	06d0      	lsls	r0, r2, #27
 80059a0:	bf44      	itt	mi
 80059a2:	2320      	movmi	r3, #32
 80059a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a8:	0711      	lsls	r1, r2, #28
 80059aa:	bf44      	itt	mi
 80059ac:	232b      	movmi	r3, #43	@ 0x2b
 80059ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059b2:	f89a 3000 	ldrb.w	r3, [sl]
 80059b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b8:	d015      	beq.n	80059e6 <_svfiprintf_r+0xfa>
 80059ba:	9a07      	ldr	r2, [sp, #28]
 80059bc:	4654      	mov	r4, sl
 80059be:	2000      	movs	r0, #0
 80059c0:	f04f 0c0a 	mov.w	ip, #10
 80059c4:	4621      	mov	r1, r4
 80059c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ca:	3b30      	subs	r3, #48	@ 0x30
 80059cc:	2b09      	cmp	r3, #9
 80059ce:	d94b      	bls.n	8005a68 <_svfiprintf_r+0x17c>
 80059d0:	b1b0      	cbz	r0, 8005a00 <_svfiprintf_r+0x114>
 80059d2:	9207      	str	r2, [sp, #28]
 80059d4:	e014      	b.n	8005a00 <_svfiprintf_r+0x114>
 80059d6:	eba0 0308 	sub.w	r3, r0, r8
 80059da:	fa09 f303 	lsl.w	r3, r9, r3
 80059de:	4313      	orrs	r3, r2
 80059e0:	9304      	str	r3, [sp, #16]
 80059e2:	46a2      	mov	sl, r4
 80059e4:	e7d2      	b.n	800598c <_svfiprintf_r+0xa0>
 80059e6:	9b03      	ldr	r3, [sp, #12]
 80059e8:	1d19      	adds	r1, r3, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	9103      	str	r1, [sp, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bfbb      	ittet	lt
 80059f2:	425b      	neglt	r3, r3
 80059f4:	f042 0202 	orrlt.w	r2, r2, #2
 80059f8:	9307      	strge	r3, [sp, #28]
 80059fa:	9307      	strlt	r3, [sp, #28]
 80059fc:	bfb8      	it	lt
 80059fe:	9204      	strlt	r2, [sp, #16]
 8005a00:	7823      	ldrb	r3, [r4, #0]
 8005a02:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a04:	d10a      	bne.n	8005a1c <_svfiprintf_r+0x130>
 8005a06:	7863      	ldrb	r3, [r4, #1]
 8005a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a0a:	d132      	bne.n	8005a72 <_svfiprintf_r+0x186>
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	1d1a      	adds	r2, r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	9203      	str	r2, [sp, #12]
 8005a14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a18:	3402      	adds	r4, #2
 8005a1a:	9305      	str	r3, [sp, #20]
 8005a1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ae0 <_svfiprintf_r+0x1f4>
 8005a20:	7821      	ldrb	r1, [r4, #0]
 8005a22:	2203      	movs	r2, #3
 8005a24:	4650      	mov	r0, sl
 8005a26:	f7fa fbd3 	bl	80001d0 <memchr>
 8005a2a:	b138      	cbz	r0, 8005a3c <_svfiprintf_r+0x150>
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	eba0 000a 	sub.w	r0, r0, sl
 8005a32:	2240      	movs	r2, #64	@ 0x40
 8005a34:	4082      	lsls	r2, r0
 8005a36:	4313      	orrs	r3, r2
 8005a38:	3401      	adds	r4, #1
 8005a3a:	9304      	str	r3, [sp, #16]
 8005a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a40:	4824      	ldr	r0, [pc, #144]	@ (8005ad4 <_svfiprintf_r+0x1e8>)
 8005a42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a46:	2206      	movs	r2, #6
 8005a48:	f7fa fbc2 	bl	80001d0 <memchr>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d036      	beq.n	8005abe <_svfiprintf_r+0x1d2>
 8005a50:	4b21      	ldr	r3, [pc, #132]	@ (8005ad8 <_svfiprintf_r+0x1ec>)
 8005a52:	bb1b      	cbnz	r3, 8005a9c <_svfiprintf_r+0x1b0>
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	3307      	adds	r3, #7
 8005a58:	f023 0307 	bic.w	r3, r3, #7
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	9303      	str	r3, [sp, #12]
 8005a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a62:	4433      	add	r3, r6
 8005a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a66:	e76a      	b.n	800593e <_svfiprintf_r+0x52>
 8005a68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e7a8      	b.n	80059c4 <_svfiprintf_r+0xd8>
 8005a72:	2300      	movs	r3, #0
 8005a74:	3401      	adds	r4, #1
 8005a76:	9305      	str	r3, [sp, #20]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f04f 0c0a 	mov.w	ip, #10
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a84:	3a30      	subs	r2, #48	@ 0x30
 8005a86:	2a09      	cmp	r2, #9
 8005a88:	d903      	bls.n	8005a92 <_svfiprintf_r+0x1a6>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0c6      	beq.n	8005a1c <_svfiprintf_r+0x130>
 8005a8e:	9105      	str	r1, [sp, #20]
 8005a90:	e7c4      	b.n	8005a1c <_svfiprintf_r+0x130>
 8005a92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a96:	4604      	mov	r4, r0
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e7f0      	b.n	8005a7e <_svfiprintf_r+0x192>
 8005a9c:	ab03      	add	r3, sp, #12
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8005adc <_svfiprintf_r+0x1f0>)
 8005aa4:	a904      	add	r1, sp, #16
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	f3af 8000 	nop.w
 8005aac:	1c42      	adds	r2, r0, #1
 8005aae:	4606      	mov	r6, r0
 8005ab0:	d1d6      	bne.n	8005a60 <_svfiprintf_r+0x174>
 8005ab2:	89ab      	ldrh	r3, [r5, #12]
 8005ab4:	065b      	lsls	r3, r3, #25
 8005ab6:	f53f af2d 	bmi.w	8005914 <_svfiprintf_r+0x28>
 8005aba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005abc:	e72c      	b.n	8005918 <_svfiprintf_r+0x2c>
 8005abe:	ab03      	add	r3, sp, #12
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	462a      	mov	r2, r5
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <_svfiprintf_r+0x1f0>)
 8005ac6:	a904      	add	r1, sp, #16
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f000 f879 	bl	8005bc0 <_printf_i>
 8005ace:	e7ed      	b.n	8005aac <_svfiprintf_r+0x1c0>
 8005ad0:	08005f60 	.word	0x08005f60
 8005ad4:	08005f6a 	.word	0x08005f6a
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	08005835 	.word	0x08005835
 8005ae0:	08005f66 	.word	0x08005f66

08005ae4 <_printf_common>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	4616      	mov	r6, r2
 8005aea:	4698      	mov	r8, r3
 8005aec:	688a      	ldr	r2, [r1, #8]
 8005aee:	690b      	ldr	r3, [r1, #16]
 8005af0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bfb8      	it	lt
 8005af8:	4613      	movlt	r3, r2
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b00:	4607      	mov	r7, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b10a      	cbz	r2, 8005b0a <_printf_common+0x26>
 8005b06:	3301      	adds	r3, #1
 8005b08:	6033      	str	r3, [r6, #0]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	0699      	lsls	r1, r3, #26
 8005b0e:	bf42      	ittt	mi
 8005b10:	6833      	ldrmi	r3, [r6, #0]
 8005b12:	3302      	addmi	r3, #2
 8005b14:	6033      	strmi	r3, [r6, #0]
 8005b16:	6825      	ldr	r5, [r4, #0]
 8005b18:	f015 0506 	ands.w	r5, r5, #6
 8005b1c:	d106      	bne.n	8005b2c <_printf_common+0x48>
 8005b1e:	f104 0a19 	add.w	sl, r4, #25
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	6832      	ldr	r2, [r6, #0]
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc26      	bgt.n	8005b7a <_printf_common+0x96>
 8005b2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	3b00      	subs	r3, #0
 8005b34:	bf18      	it	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	0692      	lsls	r2, r2, #26
 8005b3a:	d42b      	bmi.n	8005b94 <_printf_common+0xb0>
 8005b3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b40:	4641      	mov	r1, r8
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c8      	blx	r9
 8005b46:	3001      	adds	r0, #1
 8005b48:	d01e      	beq.n	8005b88 <_printf_common+0xa4>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	6922      	ldr	r2, [r4, #16]
 8005b4e:	f003 0306 	and.w	r3, r3, #6
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	bf02      	ittt	eq
 8005b56:	68e5      	ldreq	r5, [r4, #12]
 8005b58:	6833      	ldreq	r3, [r6, #0]
 8005b5a:	1aed      	subeq	r5, r5, r3
 8005b5c:	68a3      	ldr	r3, [r4, #8]
 8005b5e:	bf0c      	ite	eq
 8005b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b64:	2500      	movne	r5, #0
 8005b66:	4293      	cmp	r3, r2
 8005b68:	bfc4      	itt	gt
 8005b6a:	1a9b      	subgt	r3, r3, r2
 8005b6c:	18ed      	addgt	r5, r5, r3
 8005b6e:	2600      	movs	r6, #0
 8005b70:	341a      	adds	r4, #26
 8005b72:	42b5      	cmp	r5, r6
 8005b74:	d11a      	bne.n	8005bac <_printf_common+0xc8>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e008      	b.n	8005b8c <_printf_common+0xa8>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	4641      	mov	r1, r8
 8005b80:	4638      	mov	r0, r7
 8005b82:	47c8      	blx	r9
 8005b84:	3001      	adds	r0, #1
 8005b86:	d103      	bne.n	8005b90 <_printf_common+0xac>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	3501      	adds	r5, #1
 8005b92:	e7c6      	b.n	8005b22 <_printf_common+0x3e>
 8005b94:	18e1      	adds	r1, r4, r3
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	2030      	movs	r0, #48	@ 0x30
 8005b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b9e:	4422      	add	r2, r4
 8005ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ba4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ba8:	3302      	adds	r3, #2
 8005baa:	e7c7      	b.n	8005b3c <_printf_common+0x58>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4622      	mov	r2, r4
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c8      	blx	r9
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d0e6      	beq.n	8005b88 <_printf_common+0xa4>
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7d9      	b.n	8005b72 <_printf_common+0x8e>
	...

08005bc0 <_printf_i>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	7e0f      	ldrb	r7, [r1, #24]
 8005bc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bc8:	2f78      	cmp	r7, #120	@ 0x78
 8005bca:	4691      	mov	r9, r2
 8005bcc:	4680      	mov	r8, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bd6:	d807      	bhi.n	8005be8 <_printf_i+0x28>
 8005bd8:	2f62      	cmp	r7, #98	@ 0x62
 8005bda:	d80a      	bhi.n	8005bf2 <_printf_i+0x32>
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f000 80d2 	beq.w	8005d86 <_printf_i+0x1c6>
 8005be2:	2f58      	cmp	r7, #88	@ 0x58
 8005be4:	f000 80b9 	beq.w	8005d5a <_printf_i+0x19a>
 8005be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bf0:	e03a      	b.n	8005c68 <_printf_i+0xa8>
 8005bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bf6:	2b15      	cmp	r3, #21
 8005bf8:	d8f6      	bhi.n	8005be8 <_printf_i+0x28>
 8005bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8005c00 <_printf_i+0x40>)
 8005bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005be9 	.word	0x08005be9
 8005c0c:	08005be9 	.word	0x08005be9
 8005c10:	08005be9 	.word	0x08005be9
 8005c14:	08005be9 	.word	0x08005be9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005be9 	.word	0x08005be9
 8005c20:	08005be9 	.word	0x08005be9
 8005c24:	08005be9 	.word	0x08005be9
 8005c28:	08005be9 	.word	0x08005be9
 8005c2c:	08005d6d 	.word	0x08005d6d
 8005c30:	08005c97 	.word	0x08005c97
 8005c34:	08005d27 	.word	0x08005d27
 8005c38:	08005be9 	.word	0x08005be9
 8005c3c:	08005be9 	.word	0x08005be9
 8005c40:	08005d8f 	.word	0x08005d8f
 8005c44:	08005be9 	.word	0x08005be9
 8005c48:	08005c97 	.word	0x08005c97
 8005c4c:	08005be9 	.word	0x08005be9
 8005c50:	08005be9 	.word	0x08005be9
 8005c54:	08005d2f 	.word	0x08005d2f
 8005c58:	6833      	ldr	r3, [r6, #0]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6032      	str	r2, [r6, #0]
 8005c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e09d      	b.n	8005da8 <_printf_i+0x1e8>
 8005c6c:	6833      	ldr	r3, [r6, #0]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1d19      	adds	r1, r3, #4
 8005c72:	6031      	str	r1, [r6, #0]
 8005c74:	0606      	lsls	r6, r0, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xbc>
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	e003      	b.n	8005c84 <_printf_i+0xc4>
 8005c7c:	0645      	lsls	r5, r0, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xb8>
 8005c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	da03      	bge.n	8005c90 <_printf_i+0xd0>
 8005c88:	232d      	movs	r3, #45	@ 0x2d
 8005c8a:	426d      	negs	r5, r5
 8005c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c90:	4859      	ldr	r0, [pc, #356]	@ (8005df8 <_printf_i+0x238>)
 8005c92:	230a      	movs	r3, #10
 8005c94:	e011      	b.n	8005cba <_printf_i+0xfa>
 8005c96:	6821      	ldr	r1, [r4, #0]
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	0608      	lsls	r0, r1, #24
 8005c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ca0:	d402      	bmi.n	8005ca8 <_printf_i+0xe8>
 8005ca2:	0649      	lsls	r1, r1, #25
 8005ca4:	bf48      	it	mi
 8005ca6:	b2ad      	uxthmi	r5, r5
 8005ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005caa:	4853      	ldr	r0, [pc, #332]	@ (8005df8 <_printf_i+0x238>)
 8005cac:	6033      	str	r3, [r6, #0]
 8005cae:	bf14      	ite	ne
 8005cb0:	230a      	movne	r3, #10
 8005cb2:	2308      	moveq	r3, #8
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cba:	6866      	ldr	r6, [r4, #4]
 8005cbc:	60a6      	str	r6, [r4, #8]
 8005cbe:	2e00      	cmp	r6, #0
 8005cc0:	bfa2      	ittt	ge
 8005cc2:	6821      	ldrge	r1, [r4, #0]
 8005cc4:	f021 0104 	bicge.w	r1, r1, #4
 8005cc8:	6021      	strge	r1, [r4, #0]
 8005cca:	b90d      	cbnz	r5, 8005cd0 <_printf_i+0x110>
 8005ccc:	2e00      	cmp	r6, #0
 8005cce:	d04b      	beq.n	8005d68 <_printf_i+0x1a8>
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cd6:	fb03 5711 	mls	r7, r3, r1, r5
 8005cda:	5dc7      	ldrb	r7, [r0, r7]
 8005cdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ce0:	462f      	mov	r7, r5
 8005ce2:	42bb      	cmp	r3, r7
 8005ce4:	460d      	mov	r5, r1
 8005ce6:	d9f4      	bls.n	8005cd2 <_printf_i+0x112>
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d10b      	bne.n	8005d04 <_printf_i+0x144>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	07df      	lsls	r7, r3, #31
 8005cf0:	d508      	bpl.n	8005d04 <_printf_i+0x144>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	6861      	ldr	r1, [r4, #4]
 8005cf6:	4299      	cmp	r1, r3
 8005cf8:	bfde      	ittt	le
 8005cfa:	2330      	movle	r3, #48	@ 0x30
 8005cfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d04:	1b92      	subs	r2, r2, r6
 8005d06:	6122      	str	r2, [r4, #16]
 8005d08:	f8cd a000 	str.w	sl, [sp]
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	aa03      	add	r2, sp, #12
 8005d10:	4621      	mov	r1, r4
 8005d12:	4640      	mov	r0, r8
 8005d14:	f7ff fee6 	bl	8005ae4 <_printf_common>
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d14a      	bne.n	8005db2 <_printf_i+0x1f2>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	b004      	add	sp, #16
 8005d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	f043 0320 	orr.w	r3, r3, #32
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	4833      	ldr	r0, [pc, #204]	@ (8005dfc <_printf_i+0x23c>)
 8005d30:	2778      	movs	r7, #120	@ 0x78
 8005d32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	6831      	ldr	r1, [r6, #0]
 8005d3a:	061f      	lsls	r7, r3, #24
 8005d3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d40:	d402      	bmi.n	8005d48 <_printf_i+0x188>
 8005d42:	065f      	lsls	r7, r3, #25
 8005d44:	bf48      	it	mi
 8005d46:	b2ad      	uxthmi	r5, r5
 8005d48:	6031      	str	r1, [r6, #0]
 8005d4a:	07d9      	lsls	r1, r3, #31
 8005d4c:	bf44      	itt	mi
 8005d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005d52:	6023      	strmi	r3, [r4, #0]
 8005d54:	b11d      	cbz	r5, 8005d5e <_printf_i+0x19e>
 8005d56:	2310      	movs	r3, #16
 8005d58:	e7ac      	b.n	8005cb4 <_printf_i+0xf4>
 8005d5a:	4827      	ldr	r0, [pc, #156]	@ (8005df8 <_printf_i+0x238>)
 8005d5c:	e7e9      	b.n	8005d32 <_printf_i+0x172>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	f023 0320 	bic.w	r3, r3, #32
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	e7f6      	b.n	8005d56 <_printf_i+0x196>
 8005d68:	4616      	mov	r6, r2
 8005d6a:	e7bd      	b.n	8005ce8 <_printf_i+0x128>
 8005d6c:	6833      	ldr	r3, [r6, #0]
 8005d6e:	6825      	ldr	r5, [r4, #0]
 8005d70:	6961      	ldr	r1, [r4, #20]
 8005d72:	1d18      	adds	r0, r3, #4
 8005d74:	6030      	str	r0, [r6, #0]
 8005d76:	062e      	lsls	r6, r5, #24
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	d501      	bpl.n	8005d80 <_printf_i+0x1c0>
 8005d7c:	6019      	str	r1, [r3, #0]
 8005d7e:	e002      	b.n	8005d86 <_printf_i+0x1c6>
 8005d80:	0668      	lsls	r0, r5, #25
 8005d82:	d5fb      	bpl.n	8005d7c <_printf_i+0x1bc>
 8005d84:	8019      	strh	r1, [r3, #0]
 8005d86:	2300      	movs	r3, #0
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	4616      	mov	r6, r2
 8005d8c:	e7bc      	b.n	8005d08 <_printf_i+0x148>
 8005d8e:	6833      	ldr	r3, [r6, #0]
 8005d90:	1d1a      	adds	r2, r3, #4
 8005d92:	6032      	str	r2, [r6, #0]
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7fa fa18 	bl	80001d0 <memchr>
 8005da0:	b108      	cbz	r0, 8005da6 <_printf_i+0x1e6>
 8005da2:	1b80      	subs	r0, r0, r6
 8005da4:	6060      	str	r0, [r4, #4]
 8005da6:	6863      	ldr	r3, [r4, #4]
 8005da8:	6123      	str	r3, [r4, #16]
 8005daa:	2300      	movs	r3, #0
 8005dac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db0:	e7aa      	b.n	8005d08 <_printf_i+0x148>
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	4632      	mov	r2, r6
 8005db6:	4649      	mov	r1, r9
 8005db8:	4640      	mov	r0, r8
 8005dba:	47d0      	blx	sl
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d0ad      	beq.n	8005d1c <_printf_i+0x15c>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	079b      	lsls	r3, r3, #30
 8005dc4:	d413      	bmi.n	8005dee <_printf_i+0x22e>
 8005dc6:	68e0      	ldr	r0, [r4, #12]
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	4298      	cmp	r0, r3
 8005dcc:	bfb8      	it	lt
 8005dce:	4618      	movlt	r0, r3
 8005dd0:	e7a6      	b.n	8005d20 <_printf_i+0x160>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	4640      	mov	r0, r8
 8005dda:	47d0      	blx	sl
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d09d      	beq.n	8005d1c <_printf_i+0x15c>
 8005de0:	3501      	adds	r5, #1
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	9903      	ldr	r1, [sp, #12]
 8005de6:	1a5b      	subs	r3, r3, r1
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dcf2      	bgt.n	8005dd2 <_printf_i+0x212>
 8005dec:	e7eb      	b.n	8005dc6 <_printf_i+0x206>
 8005dee:	2500      	movs	r5, #0
 8005df0:	f104 0619 	add.w	r6, r4, #25
 8005df4:	e7f5      	b.n	8005de2 <_printf_i+0x222>
 8005df6:	bf00      	nop
 8005df8:	08005f71 	.word	0x08005f71
 8005dfc:	08005f82 	.word	0x08005f82

08005e00 <memmove>:
 8005e00:	4288      	cmp	r0, r1
 8005e02:	b510      	push	{r4, lr}
 8005e04:	eb01 0402 	add.w	r4, r1, r2
 8005e08:	d902      	bls.n	8005e10 <memmove+0x10>
 8005e0a:	4284      	cmp	r4, r0
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	d807      	bhi.n	8005e20 <memmove+0x20>
 8005e10:	1e43      	subs	r3, r0, #1
 8005e12:	42a1      	cmp	r1, r4
 8005e14:	d008      	beq.n	8005e28 <memmove+0x28>
 8005e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e1e:	e7f8      	b.n	8005e12 <memmove+0x12>
 8005e20:	4402      	add	r2, r0
 8005e22:	4601      	mov	r1, r0
 8005e24:	428a      	cmp	r2, r1
 8005e26:	d100      	bne.n	8005e2a <memmove+0x2a>
 8005e28:	bd10      	pop	{r4, pc}
 8005e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e32:	e7f7      	b.n	8005e24 <memmove+0x24>

08005e34 <_sbrk_r>:
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4d06      	ldr	r5, [pc, #24]	@ (8005e50 <_sbrk_r+0x1c>)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	4608      	mov	r0, r1
 8005e3e:	602b      	str	r3, [r5, #0]
 8005e40:	f7fa ff02 	bl	8000c48 <_sbrk>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_sbrk_r+0x1a>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_sbrk_r+0x1a>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	20000350 	.word	0x20000350

08005e54 <memcpy>:
 8005e54:	440a      	add	r2, r1
 8005e56:	4291      	cmp	r1, r2
 8005e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e5c:	d100      	bne.n	8005e60 <memcpy+0xc>
 8005e5e:	4770      	bx	lr
 8005e60:	b510      	push	{r4, lr}
 8005e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e6a:	4291      	cmp	r1, r2
 8005e6c:	d1f9      	bne.n	8005e62 <memcpy+0xe>
 8005e6e:	bd10      	pop	{r4, pc}

08005e70 <_realloc_r>:
 8005e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	4680      	mov	r8, r0
 8005e76:	4615      	mov	r5, r2
 8005e78:	460c      	mov	r4, r1
 8005e7a:	b921      	cbnz	r1, 8005e86 <_realloc_r+0x16>
 8005e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e80:	4611      	mov	r1, r2
 8005e82:	f7ff bc4b 	b.w	800571c <_malloc_r>
 8005e86:	b92a      	cbnz	r2, 8005e94 <_realloc_r+0x24>
 8005e88:	f7ff fbdc 	bl	8005644 <_free_r>
 8005e8c:	2400      	movs	r4, #0
 8005e8e:	4620      	mov	r0, r4
 8005e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e94:	f000 f81a 	bl	8005ecc <_malloc_usable_size_r>
 8005e98:	4285      	cmp	r5, r0
 8005e9a:	4606      	mov	r6, r0
 8005e9c:	d802      	bhi.n	8005ea4 <_realloc_r+0x34>
 8005e9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ea2:	d8f4      	bhi.n	8005e8e <_realloc_r+0x1e>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f7ff fc38 	bl	800571c <_malloc_r>
 8005eac:	4607      	mov	r7, r0
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d0ec      	beq.n	8005e8c <_realloc_r+0x1c>
 8005eb2:	42b5      	cmp	r5, r6
 8005eb4:	462a      	mov	r2, r5
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	bf28      	it	cs
 8005eba:	4632      	movcs	r2, r6
 8005ebc:	f7ff ffca 	bl	8005e54 <memcpy>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f7ff fbbe 	bl	8005644 <_free_r>
 8005ec8:	463c      	mov	r4, r7
 8005eca:	e7e0      	b.n	8005e8e <_realloc_r+0x1e>

08005ecc <_malloc_usable_size_r>:
 8005ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed0:	1f18      	subs	r0, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	bfbc      	itt	lt
 8005ed6:	580b      	ldrlt	r3, [r1, r0]
 8005ed8:	18c0      	addlt	r0, r0, r3
 8005eda:	4770      	bx	lr

08005edc <_init>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_fini>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr
